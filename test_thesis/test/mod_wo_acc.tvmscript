#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 32, 32), int16], %bn_data_gamma: Tensor[(3), int16], %bn_data_beta: Tensor[(3), int16], %bn_data_moving_mean: Tensor[(3), int16], %bn_data_moving_var: Tensor[(3), int16], %conv0_weight: Tensor[(64, 3, 3, 3), int16], %stage1_unit1_bn1_gamma: Tensor[(64), int16], %stage1_unit1_bn1_beta: Tensor[(64), int16], %stage1_unit1_bn1_moving_mean: Tensor[(64), int16], %stage1_unit1_bn1_moving_var: Tensor[(64), int16], %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_bn2_gamma: Tensor[(64), int16], %stage1_unit1_bn2_beta: Tensor[(64), int16], %stage1_unit1_bn2_moving_mean: Tensor[(64), int16], %stage1_unit1_bn2_moving_var: Tensor[(64), int16], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), int16], %stage1_unit2_bn1_gamma: Tensor[(64), int16], %stage1_unit2_bn1_beta: Tensor[(64), int16], %stage1_unit2_bn1_moving_mean: Tensor[(64), int16], %stage1_unit2_bn1_moving_var: Tensor[(64), int16], %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit2_bn2_gamma: Tensor[(64), int16], %stage1_unit2_bn2_beta: Tensor[(64), int16], %stage1_unit2_bn2_moving_mean: Tensor[(64), int16], %stage1_unit2_bn2_moving_var: Tensor[(64), int16], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage2_unit1_bn1_gamma: Tensor[(64), int16], %stage2_unit1_bn1_beta: Tensor[(64), int16], %stage2_unit1_bn1_moving_mean: Tensor[(64), int16], %stage2_unit1_bn1_moving_var: Tensor[(64), int16], %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), int16], %stage2_unit1_bn2_gamma: Tensor[(128), int16], %stage2_unit1_bn2_beta: Tensor[(128), int16], %stage2_unit1_bn2_moving_mean: Tensor[(128), int16], %stage2_unit1_bn2_moving_var: Tensor[(128), int16], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), int16], %stage2_unit2_bn1_gamma: Tensor[(128), int16], %stage2_unit2_bn1_beta: Tensor[(128), int16], %stage2_unit2_bn1_moving_mean: Tensor[(128), int16], %stage2_unit2_bn1_moving_var: Tensor[(128), int16], %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit2_bn2_gamma: Tensor[(128), int16], %stage2_unit2_bn2_beta: Tensor[(128), int16], %stage2_unit2_bn2_moving_mean: Tensor[(128), int16], %stage2_unit2_bn2_moving_var: Tensor[(128), int16], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage3_unit1_bn1_gamma: Tensor[(128), int16], %stage3_unit1_bn1_beta: Tensor[(128), int16], %stage3_unit1_bn1_moving_mean: Tensor[(128), int16], %stage3_unit1_bn1_moving_var: Tensor[(128), int16], %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), int16], %stage3_unit1_bn2_gamma: Tensor[(256), int16], %stage3_unit1_bn2_beta: Tensor[(256), int16], %stage3_unit1_bn2_moving_mean: Tensor[(256), int16], %stage3_unit1_bn2_moving_var: Tensor[(256), int16], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), int16], %stage3_unit2_bn1_gamma: Tensor[(256), int16], %stage3_unit2_bn1_beta: Tensor[(256), int16], %stage3_unit2_bn1_moving_mean: Tensor[(256), int16], %stage3_unit2_bn1_moving_var: Tensor[(256), int16], %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit2_bn2_gamma: Tensor[(256), int16], %stage3_unit2_bn2_beta: Tensor[(256), int16], %stage3_unit2_bn2_moving_mean: Tensor[(256), int16], %stage3_unit2_bn2_moving_var: Tensor[(256), int16], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage4_unit1_bn1_gamma: Tensor[(256), int16], %stage4_unit1_bn1_beta: Tensor[(256), int16], %stage4_unit1_bn1_moving_mean: Tensor[(256), int16], %stage4_unit1_bn1_moving_var: Tensor[(256), int16], %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), int16], %stage4_unit1_bn2_gamma: Tensor[(512), int16], %stage4_unit1_bn2_beta: Tensor[(512), int16], %stage4_unit1_bn2_moving_mean: Tensor[(512), int16], %stage4_unit1_bn2_moving_var: Tensor[(512), int16], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), int16], %stage4_unit2_bn1_gamma: Tensor[(512), int16], %stage4_unit2_bn1_beta: Tensor[(512), int16], %stage4_unit2_bn1_moving_mean: Tensor[(512), int16], %stage4_unit2_bn1_moving_var: Tensor[(512), int16], %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit2_bn2_gamma: Tensor[(512), int16], %stage4_unit2_bn2_beta: Tensor[(512), int16], %stage4_unit2_bn2_moving_mean: Tensor[(512), int16], %stage4_unit2_bn2_moving_var: Tensor[(512), int16], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), int16], %bn1_gamma: Tensor[(512), int16], %bn1_beta: Tensor[(512), int16], %bn1_moving_mean: Tensor[(512), int16], %bn1_moving_var: Tensor[(512), int16], %fc1_weight: Tensor[(10, 512), int16], %fc1_bias: Tensor[(10), int16]) -> Tensor[(1, 10), int16] {
  %0 = cast(%data, Tensor[(1, 3, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 3, 32, 32), float32] */;
  %1 = cast(%bn_data_gamma, Tensor[(3), int16], dtype="float32") /* ty=Tensor[(3), float32] */;
  %2 = cast(%bn_data_beta, Tensor[(3), int16], dtype="float32") /* ty=Tensor[(3), float32] */;
  %3 = cast(%bn_data_moving_mean, Tensor[(3), int16], dtype="float32") /* ty=Tensor[(3), float32] */;
  %4 = cast(%bn_data_moving_var, Tensor[(3), int16], dtype="float32") /* ty=Tensor[(3), float32] */;
  %5 = nn.batch_norm(%0, %1, %2, %3, %4, Tensor[(1, 3, 32, 32), float32], Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32], Tensor[(3), float32], epsilon=0f) /* ty=(Tensor[(1, 3, 32, 32), float32], Tensor[(3), float32], Tensor[(3), float32]) */;
  %6 = %5.0;
  %7 = clip(%6, Tensor[(1, 3, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 3, 32, 32), float32] */;
  %8 = cast(%7, Tensor[(1, 3, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 3, 32, 32), int16] */;
  %9 = nn.conv2d(%8, %conv0_weight, Tensor[(1, 3, 32, 32), int16], Tensor[(64, 3, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %10 = cast(%9, Tensor[(1, 64, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %11 = cast(%stage1_unit1_bn1_gamma, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %12 = cast(%stage1_unit1_bn1_beta, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %13 = cast(%stage1_unit1_bn1_moving_mean, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %14 = cast(%stage1_unit1_bn1_moving_var, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %15 = nn.batch_norm(%10, %11, %12, %13, %14, Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %16 = %15.0;
  %17 = clip(%16, Tensor[(1, 64, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %18 = cast(%17, Tensor[(1, 64, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %19 = nn.relu(%18, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %20 = nn.conv2d(%19, %stage1_unit1_conv1_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %21 = cast(%20, Tensor[(1, 64, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %22 = cast(%stage1_unit1_bn2_gamma, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %23 = cast(%stage1_unit1_bn2_beta, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %24 = cast(%stage1_unit1_bn2_moving_mean, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %25 = cast(%stage1_unit1_bn2_moving_var, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %26 = nn.batch_norm(%21, %22, %23, %24, %25, Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %27 = %26.0;
  %28 = clip(%27, Tensor[(1, 64, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %29 = cast(%28, Tensor[(1, 64, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %30 = nn.relu(%29, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %31 = nn.conv2d(%30, %stage1_unit1_conv2_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %32 = nn.conv2d(%19, %stage1_unit1_sc_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 1, 1), int16], padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %33 = add(%31, %32, Tensor[(1, 64, 32, 32), int16], Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %34 = cast(%33, Tensor[(1, 64, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %35 = cast(%stage1_unit2_bn1_gamma, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %36 = cast(%stage1_unit2_bn1_beta, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %37 = cast(%stage1_unit2_bn1_moving_mean, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %38 = cast(%stage1_unit2_bn1_moving_var, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %39 = nn.batch_norm(%34, %35, %36, %37, %38, Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %40 = %39.0;
  %41 = clip(%40, Tensor[(1, 64, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %42 = cast(%41, Tensor[(1, 64, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %43 = nn.relu(%42, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %44 = nn.conv2d(%43, %stage1_unit2_conv1_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %45 = cast(%44, Tensor[(1, 64, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %46 = cast(%stage1_unit2_bn2_gamma, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %47 = cast(%stage1_unit2_bn2_beta, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %48 = cast(%stage1_unit2_bn2_moving_mean, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %49 = cast(%stage1_unit2_bn2_moving_var, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %50 = nn.batch_norm(%45, %46, %47, %48, %49, Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %51 = %50.0;
  %52 = clip(%51, Tensor[(1, 64, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %53 = cast(%52, Tensor[(1, 64, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %54 = nn.relu(%53, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %55 = nn.conv2d(%54, %stage1_unit2_conv2_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %56 = add(%55, %33, Tensor[(1, 64, 32, 32), int16], Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %57 = cast(%56, Tensor[(1, 64, 32, 32), int16], dtype="float32") /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %58 = cast(%stage2_unit1_bn1_gamma, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %59 = cast(%stage2_unit1_bn1_beta, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %60 = cast(%stage2_unit1_bn1_moving_mean, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %61 = cast(%stage2_unit1_bn1_moving_var, Tensor[(64), int16], dtype="float32") /* ty=Tensor[(64), float32] */;
  %62 = nn.batch_norm(%57, %58, %59, %60, %61, Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], Tensor[(64), float32], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %63 = %62.0;
  %64 = clip(%63, Tensor[(1, 64, 32, 32), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 64, 32, 32), float32] */;
  %65 = cast(%64, Tensor[(1, 64, 32, 32), float32], dtype="int16") /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %66 = nn.relu(%65, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %67 = nn.conv2d(%66, %stage2_unit1_conv1_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(128, 64, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %68 = cast(%67, Tensor[(1, 128, 16, 16), int16], dtype="float32") /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %69 = cast(%stage2_unit1_bn2_gamma, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %70 = cast(%stage2_unit1_bn2_beta, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %71 = cast(%stage2_unit1_bn2_moving_mean, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %72 = cast(%stage2_unit1_bn2_moving_var, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %73 = nn.batch_norm(%68, %69, %70, %71, %72, Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %74 = %73.0;
  %75 = clip(%74, Tensor[(1, 128, 16, 16), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %76 = cast(%75, Tensor[(1, 128, 16, 16), float32], dtype="int16") /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %77 = nn.relu(%76, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %78 = nn.conv2d(%77, %stage2_unit1_conv2_weight, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %79 = nn.conv2d(%66, %stage2_unit1_sc_weight, Tensor[(1, 64, 32, 32), int16], Tensor[(128, 64, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %80 = add(%78, %79, Tensor[(1, 128, 16, 16), int16], Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %81 = cast(%80, Tensor[(1, 128, 16, 16), int16], dtype="float32") /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %82 = cast(%stage2_unit2_bn1_gamma, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %83 = cast(%stage2_unit2_bn1_beta, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %84 = cast(%stage2_unit2_bn1_moving_mean, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %85 = cast(%stage2_unit2_bn1_moving_var, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %86 = nn.batch_norm(%81, %82, %83, %84, %85, Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %87 = %86.0;
  %88 = clip(%87, Tensor[(1, 128, 16, 16), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %89 = cast(%88, Tensor[(1, 128, 16, 16), float32], dtype="int16") /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %90 = nn.relu(%89, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %91 = nn.conv2d(%90, %stage2_unit2_conv1_weight, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %92 = cast(%91, Tensor[(1, 128, 16, 16), int16], dtype="float32") /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %93 = cast(%stage2_unit2_bn2_gamma, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %94 = cast(%stage2_unit2_bn2_beta, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %95 = cast(%stage2_unit2_bn2_moving_mean, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %96 = cast(%stage2_unit2_bn2_moving_var, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %97 = nn.batch_norm(%92, %93, %94, %95, %96, Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %98 = %97.0;
  %99 = clip(%98, Tensor[(1, 128, 16, 16), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %100 = cast(%99, Tensor[(1, 128, 16, 16), float32], dtype="int16") /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %101 = nn.relu(%100, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %102 = nn.conv2d(%101, %stage2_unit2_conv2_weight, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %103 = add(%102, %80, Tensor[(1, 128, 16, 16), int16], Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %104 = cast(%103, Tensor[(1, 128, 16, 16), int16], dtype="float32") /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %105 = cast(%stage3_unit1_bn1_gamma, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %106 = cast(%stage3_unit1_bn1_beta, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %107 = cast(%stage3_unit1_bn1_moving_mean, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %108 = cast(%stage3_unit1_bn1_moving_var, Tensor[(128), int16], dtype="float32") /* ty=Tensor[(128), float32] */;
  %109 = nn.batch_norm(%104, %105, %106, %107, %108, Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(128), float32], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %110 = %109.0;
  %111 = clip(%110, Tensor[(1, 128, 16, 16), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 128, 16, 16), float32] */;
  %112 = cast(%111, Tensor[(1, 128, 16, 16), float32], dtype="int16") /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %113 = nn.relu(%112, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %114 = nn.conv2d(%113, %stage3_unit1_conv1_weight, Tensor[(1, 128, 16, 16), int16], Tensor[(256, 128, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %115 = cast(%114, Tensor[(1, 256, 8, 8), int16], dtype="float32") /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %116 = cast(%stage3_unit1_bn2_gamma, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %117 = cast(%stage3_unit1_bn2_beta, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %118 = cast(%stage3_unit1_bn2_moving_mean, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %119 = cast(%stage3_unit1_bn2_moving_var, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %120 = nn.batch_norm(%115, %116, %117, %118, %119, Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %121 = %120.0;
  %122 = clip(%121, Tensor[(1, 256, 8, 8), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %123 = cast(%122, Tensor[(1, 256, 8, 8), float32], dtype="int16") /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %124 = nn.relu(%123, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %125 = nn.conv2d(%124, %stage3_unit1_conv2_weight, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %126 = nn.conv2d(%113, %stage3_unit1_sc_weight, Tensor[(1, 128, 16, 16), int16], Tensor[(256, 128, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %127 = add(%125, %126, Tensor[(1, 256, 8, 8), int16], Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %128 = cast(%127, Tensor[(1, 256, 8, 8), int16], dtype="float32") /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %129 = cast(%stage3_unit2_bn1_gamma, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %130 = cast(%stage3_unit2_bn1_beta, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %131 = cast(%stage3_unit2_bn1_moving_mean, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %132 = cast(%stage3_unit2_bn1_moving_var, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %133 = nn.batch_norm(%128, %129, %130, %131, %132, Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %134 = %133.0;
  %135 = clip(%134, Tensor[(1, 256, 8, 8), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %136 = cast(%135, Tensor[(1, 256, 8, 8), float32], dtype="int16") /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %137 = nn.relu(%136, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %138 = nn.conv2d(%137, %stage3_unit2_conv1_weight, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %139 = cast(%138, Tensor[(1, 256, 8, 8), int16], dtype="float32") /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %140 = cast(%stage3_unit2_bn2_gamma, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %141 = cast(%stage3_unit2_bn2_beta, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %142 = cast(%stage3_unit2_bn2_moving_mean, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %143 = cast(%stage3_unit2_bn2_moving_var, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %144 = nn.batch_norm(%139, %140, %141, %142, %143, Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %145 = %144.0;
  %146 = clip(%145, Tensor[(1, 256, 8, 8), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %147 = cast(%146, Tensor[(1, 256, 8, 8), float32], dtype="int16") /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %148 = nn.relu(%147, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %149 = nn.conv2d(%148, %stage3_unit2_conv2_weight, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %150 = add(%149, %127, Tensor[(1, 256, 8, 8), int16], Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %151 = cast(%150, Tensor[(1, 256, 8, 8), int16], dtype="float32") /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %152 = cast(%stage4_unit1_bn1_gamma, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %153 = cast(%stage4_unit1_bn1_beta, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %154 = cast(%stage4_unit1_bn1_moving_mean, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %155 = cast(%stage4_unit1_bn1_moving_var, Tensor[(256), int16], dtype="float32") /* ty=Tensor[(256), float32] */;
  %156 = nn.batch_norm(%151, %152, %153, %154, %155, Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], Tensor[(256), float32], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %157 = %156.0;
  %158 = clip(%157, Tensor[(1, 256, 8, 8), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 256, 8, 8), float32] */;
  %159 = cast(%158, Tensor[(1, 256, 8, 8), float32], dtype="int16") /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %160 = nn.relu(%159, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %161 = nn.conv2d(%160, %stage4_unit1_conv1_weight, Tensor[(1, 256, 8, 8), int16], Tensor[(512, 256, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %162 = cast(%161, Tensor[(1, 512, 4, 4), int16], dtype="float32") /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %163 = cast(%stage4_unit1_bn2_gamma, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %164 = cast(%stage4_unit1_bn2_beta, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %165 = cast(%stage4_unit1_bn2_moving_mean, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %166 = cast(%stage4_unit1_bn2_moving_var, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %167 = nn.batch_norm(%162, %163, %164, %165, %166, Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %168 = %167.0;
  %169 = clip(%168, Tensor[(1, 512, 4, 4), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %170 = cast(%169, Tensor[(1, 512, 4, 4), float32], dtype="int16") /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %171 = nn.relu(%170, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %172 = nn.conv2d(%171, %stage4_unit1_conv2_weight, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %173 = nn.conv2d(%160, %stage4_unit1_sc_weight, Tensor[(1, 256, 8, 8), int16], Tensor[(512, 256, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %174 = add(%172, %173, Tensor[(1, 512, 4, 4), int16], Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %175 = cast(%174, Tensor[(1, 512, 4, 4), int16], dtype="float32") /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %176 = cast(%stage4_unit2_bn1_gamma, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %177 = cast(%stage4_unit2_bn1_beta, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %178 = cast(%stage4_unit2_bn1_moving_mean, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %179 = cast(%stage4_unit2_bn1_moving_var, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %180 = nn.batch_norm(%175, %176, %177, %178, %179, Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %181 = %180.0;
  %182 = clip(%181, Tensor[(1, 512, 4, 4), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %183 = cast(%182, Tensor[(1, 512, 4, 4), float32], dtype="int16") /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %184 = nn.relu(%183, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %185 = nn.conv2d(%184, %stage4_unit2_conv1_weight, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %186 = cast(%185, Tensor[(1, 512, 4, 4), int16], dtype="float32") /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %187 = cast(%stage4_unit2_bn2_gamma, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %188 = cast(%stage4_unit2_bn2_beta, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %189 = cast(%stage4_unit2_bn2_moving_mean, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %190 = cast(%stage4_unit2_bn2_moving_var, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %191 = nn.batch_norm(%186, %187, %188, %189, %190, Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %192 = %191.0;
  %193 = clip(%192, Tensor[(1, 512, 4, 4), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %194 = cast(%193, Tensor[(1, 512, 4, 4), float32], dtype="int16") /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %195 = nn.relu(%194, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %196 = nn.conv2d(%195, %stage4_unit2_conv2_weight, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %197 = add(%196, %174, Tensor[(1, 512, 4, 4), int16], Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %198 = cast(%197, Tensor[(1, 512, 4, 4), int16], dtype="float32") /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %199 = cast(%bn1_gamma, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %200 = cast(%bn1_beta, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %201 = cast(%bn1_moving_mean, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %202 = cast(%bn1_moving_var, Tensor[(512), int16], dtype="float32") /* ty=Tensor[(512), float32] */;
  %203 = nn.batch_norm(%198, %199, %200, %201, %202, Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], Tensor[(512), float32], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %204 = %203.0;
  %205 = clip(%204, Tensor[(1, 512, 4, 4), float32], a_min=-32768f, a_max=32767f) /* ty=Tensor[(1, 512, 4, 4), float32] */;
  %206 = cast(%205, Tensor[(1, 512, 4, 4), float32], dtype="int16") /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %207 = nn.relu(%206, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %208 = nn.global_avg_pool2d(%207, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 1, 1), int16] */;
  %209 = nn.batch_flatten(%208, Tensor[(1, 512, 1, 1), int16]) /* ty=Tensor[(1, 512), int16] */;
  %210 = nn.dense(%209, %fc1_weight, Tensor[(1, 512), int16], Tensor[(10, 512), int16], units=10) /* ty=Tensor[(1, 10), int16] */;
  %211 = nn.bias_add(%210, %fc1_bias, Tensor[(1, 10), int16], Tensor[(10), int16], axis=-1) /* ty=Tensor[(1, 10), int16] */;
  %212 = cast(%211, Tensor[(1, 10), int16], dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %213 = nn.softmax(%212, Tensor[(1, 10), float32]) /* ty=Tensor[(1, 10), float32] */;
  cast(%213, Tensor[(1, 10), float32], dtype="int16") /* ty=Tensor[(1, 10), int16] */
}

