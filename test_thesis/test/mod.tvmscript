#[version = "0.0.5"]
def @main(%data: Tensor[(1, 3, 32, 32), int16], %bn_data_gamma: Tensor[(3), int16], %bn_data_beta: Tensor[(3), int16], %bn_data_moving_mean: Tensor[(3), int16], %bn_data_moving_var: Tensor[(3), int16], %conv0_weight: Tensor[(64, 3, 3, 3), int16], %stage1_unit1_bn1_gamma: Tensor[(64), int16], %stage1_unit1_bn1_beta: Tensor[(64), int16], %stage1_unit1_bn1_moving_mean: Tensor[(64), int16], %stage1_unit1_bn1_moving_var: Tensor[(64), int16], %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_bn2_gamma: Tensor[(64), int16], %stage1_unit1_bn2_beta: Tensor[(64), int16], %stage1_unit1_bn2_moving_mean: Tensor[(64), int16], %stage1_unit1_bn2_moving_var: Tensor[(64), int16], %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), int16], %stage1_unit2_bn1_gamma: Tensor[(64), int16], %stage1_unit2_bn1_beta: Tensor[(64), int16], %stage1_unit2_bn1_moving_mean: Tensor[(64), int16], %stage1_unit2_bn1_moving_var: Tensor[(64), int16], %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), int16], %stage1_unit2_bn2_gamma: Tensor[(64), int16], %stage1_unit2_bn2_beta: Tensor[(64), int16], %stage1_unit2_bn2_moving_mean: Tensor[(64), int16], %stage1_unit2_bn2_moving_var: Tensor[(64), int16], %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), int16], %stage2_unit1_bn1_gamma: Tensor[(64), int16], %stage2_unit1_bn1_beta: Tensor[(64), int16], %stage2_unit1_bn1_moving_mean: Tensor[(64), int16], %stage2_unit1_bn1_moving_var: Tensor[(64), int16], %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), int16], %stage2_unit1_bn2_gamma: Tensor[(128), int16], %stage2_unit1_bn2_beta: Tensor[(128), int16], %stage2_unit1_bn2_moving_mean: Tensor[(128), int16], %stage2_unit1_bn2_moving_var: Tensor[(128), int16], %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), int16], %stage2_unit2_bn1_gamma: Tensor[(128), int16], %stage2_unit2_bn1_beta: Tensor[(128), int16], %stage2_unit2_bn1_moving_mean: Tensor[(128), int16], %stage2_unit2_bn1_moving_var: Tensor[(128), int16], %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), int16], %stage2_unit2_bn2_gamma: Tensor[(128), int16], %stage2_unit2_bn2_beta: Tensor[(128), int16], %stage2_unit2_bn2_moving_mean: Tensor[(128), int16], %stage2_unit2_bn2_moving_var: Tensor[(128), int16], %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), int16], %stage3_unit1_bn1_gamma: Tensor[(128), int16], %stage3_unit1_bn1_beta: Tensor[(128), int16], %stage3_unit1_bn1_moving_mean: Tensor[(128), int16], %stage3_unit1_bn1_moving_var: Tensor[(128), int16], %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), int16], %stage3_unit1_bn2_gamma: Tensor[(256), int16], %stage3_unit1_bn2_beta: Tensor[(256), int16], %stage3_unit1_bn2_moving_mean: Tensor[(256), int16], %stage3_unit1_bn2_moving_var: Tensor[(256), int16], %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), int16], %stage3_unit2_bn1_gamma: Tensor[(256), int16], %stage3_unit2_bn1_beta: Tensor[(256), int16], %stage3_unit2_bn1_moving_mean: Tensor[(256), int16], %stage3_unit2_bn1_moving_var: Tensor[(256), int16], %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), int16], %stage3_unit2_bn2_gamma: Tensor[(256), int16], %stage3_unit2_bn2_beta: Tensor[(256), int16], %stage3_unit2_bn2_moving_mean: Tensor[(256), int16], %stage3_unit2_bn2_moving_var: Tensor[(256), int16], %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), int16], %stage4_unit1_bn1_gamma: Tensor[(256), int16], %stage4_unit1_bn1_beta: Tensor[(256), int16], %stage4_unit1_bn1_moving_mean: Tensor[(256), int16], %stage4_unit1_bn1_moving_var: Tensor[(256), int16], %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), int16], %stage4_unit1_bn2_gamma: Tensor[(512), int16], %stage4_unit1_bn2_beta: Tensor[(512), int16], %stage4_unit1_bn2_moving_mean: Tensor[(512), int16], %stage4_unit1_bn2_moving_var: Tensor[(512), int16], %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), int16], %stage4_unit2_bn1_gamma: Tensor[(512), int16], %stage4_unit2_bn1_beta: Tensor[(512), int16], %stage4_unit2_bn1_moving_mean: Tensor[(512), int16], %stage4_unit2_bn1_moving_var: Tensor[(512), int16], %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), int16], %stage4_unit2_bn2_gamma: Tensor[(512), int16], %stage4_unit2_bn2_beta: Tensor[(512), int16], %stage4_unit2_bn2_moving_mean: Tensor[(512), int16], %stage4_unit2_bn2_moving_var: Tensor[(512), int16], %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), int16], %bn1_gamma: Tensor[(512), int16], %bn1_beta: Tensor[(512), int16], %bn1_moving_mean: Tensor[(512), int16], %bn1_moving_var: Tensor[(512), int16], %fc1_weight: Tensor[(10, 512), int16], %fc1_bias: Tensor[(10), int16]) -> Tensor[(1, 10), int16] {
  %0 = @tvmgen_default_ilanvdla_main_0(%data, %bn_data_gamma, %bn_data_beta, %bn_data_moving_mean, %bn_data_moving_var) /* ty=Tensor[(1, 3, 32, 32), int16] */;
  %1 = @tvmgen_default_ilanvdla_main_5(%0, %conv0_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %2 = @tvmgen_default_ilanvdla_main_7(%1, %stage1_unit1_bn1_gamma, %stage1_unit1_bn1_beta, %stage1_unit1_bn1_moving_mean, %stage1_unit1_bn1_moving_var) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %3 = @tvmgen_default_ilanvdla_main_12(%2) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %4 = @tvmgen_default_ilanvdla_main_13(%3, %stage1_unit1_conv1_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %5 = @tvmgen_default_ilanvdla_main_15(%4, %stage1_unit1_bn2_gamma, %stage1_unit1_bn2_beta, %stage1_unit1_bn2_moving_mean, %stage1_unit1_bn2_moving_var) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %6 = @tvmgen_default_ilanvdla_main_20(%5) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %7 = @tvmgen_default_ilanvdla_main_21(%6, %stage1_unit1_conv2_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %8 = @tvmgen_default_ilanvdla_main_24(%3, %stage1_unit1_sc_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %9 = @tvmgen_default_ilanvdla_main_23(%7, %8) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %10 = @tvmgen_default_ilanvdla_main_27(%9, %stage1_unit2_bn1_gamma, %stage1_unit2_bn1_beta, %stage1_unit2_bn1_moving_mean, %stage1_unit2_bn1_moving_var) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %11 = @tvmgen_default_ilanvdla_main_32(%10) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %12 = @tvmgen_default_ilanvdla_main_33(%11, %stage1_unit2_conv1_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %13 = @tvmgen_default_ilanvdla_main_35(%12, %stage1_unit2_bn2_gamma, %stage1_unit2_bn2_beta, %stage1_unit2_bn2_moving_mean, %stage1_unit2_bn2_moving_var) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %14 = @tvmgen_default_ilanvdla_main_40(%13) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %15 = @tvmgen_default_ilanvdla_main_41(%14, %stage1_unit2_conv2_weight) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %16 = @tvmgen_default_ilanvdla_main_43(%15, %9) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %17 = @tvmgen_default_ilanvdla_main_45(%16, %stage2_unit1_bn1_gamma, %stage2_unit1_bn1_beta, %stage2_unit1_bn1_moving_mean, %stage2_unit1_bn1_moving_var) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %18 = @tvmgen_default_ilanvdla_main_50(%17) /* ty=Tensor[(1, 64, 32, 32), int16] */;
  %19 = @tvmgen_default_ilanvdla_main_51(%18, %stage2_unit1_conv1_weight) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %20 = @tvmgen_default_ilanvdla_main_53(%19, %stage2_unit1_bn2_gamma, %stage2_unit1_bn2_beta, %stage2_unit1_bn2_moving_mean, %stage2_unit1_bn2_moving_var) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %21 = @tvmgen_default_ilanvdla_main_58(%20) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %22 = @tvmgen_default_ilanvdla_main_59(%21, %stage2_unit1_conv2_weight) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %23 = @tvmgen_default_ilanvdla_main_62(%18, %stage2_unit1_sc_weight) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %24 = @tvmgen_default_ilanvdla_main_61(%22, %23) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %25 = @tvmgen_default_ilanvdla_main_65(%24, %stage2_unit2_bn1_gamma, %stage2_unit2_bn1_beta, %stage2_unit2_bn1_moving_mean, %stage2_unit2_bn1_moving_var) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %26 = @tvmgen_default_ilanvdla_main_70(%25) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %27 = @tvmgen_default_ilanvdla_main_71(%26, %stage2_unit2_conv1_weight) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %28 = @tvmgen_default_ilanvdla_main_73(%27, %stage2_unit2_bn2_gamma, %stage2_unit2_bn2_beta, %stage2_unit2_bn2_moving_mean, %stage2_unit2_bn2_moving_var) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %29 = @tvmgen_default_ilanvdla_main_78(%28) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %30 = @tvmgen_default_ilanvdla_main_79(%29, %stage2_unit2_conv2_weight) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %31 = @tvmgen_default_ilanvdla_main_81(%30, %24) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %32 = @tvmgen_default_ilanvdla_main_83(%31, %stage3_unit1_bn1_gamma, %stage3_unit1_bn1_beta, %stage3_unit1_bn1_moving_mean, %stage3_unit1_bn1_moving_var) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %33 = @tvmgen_default_ilanvdla_main_88(%32) /* ty=Tensor[(1, 128, 16, 16), int16] */;
  %34 = @tvmgen_default_ilanvdla_main_89(%33, %stage3_unit1_conv1_weight) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %35 = @tvmgen_default_ilanvdla_main_91(%34, %stage3_unit1_bn2_gamma, %stage3_unit1_bn2_beta, %stage3_unit1_bn2_moving_mean, %stage3_unit1_bn2_moving_var) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %36 = @tvmgen_default_ilanvdla_main_96(%35) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %37 = @tvmgen_default_ilanvdla_main_97(%36, %stage3_unit1_conv2_weight) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %38 = @tvmgen_default_ilanvdla_main_100(%33, %stage3_unit1_sc_weight) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %39 = @tvmgen_default_ilanvdla_main_99(%37, %38) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %40 = @tvmgen_default_ilanvdla_main_103(%39, %stage3_unit2_bn1_gamma, %stage3_unit2_bn1_beta, %stage3_unit2_bn1_moving_mean, %stage3_unit2_bn1_moving_var) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %41 = @tvmgen_default_ilanvdla_main_108(%40) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %42 = @tvmgen_default_ilanvdla_main_109(%41, %stage3_unit2_conv1_weight) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %43 = @tvmgen_default_ilanvdla_main_111(%42, %stage3_unit2_bn2_gamma, %stage3_unit2_bn2_beta, %stage3_unit2_bn2_moving_mean, %stage3_unit2_bn2_moving_var) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %44 = @tvmgen_default_ilanvdla_main_116(%43) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %45 = @tvmgen_default_ilanvdla_main_117(%44, %stage3_unit2_conv2_weight) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %46 = @tvmgen_default_ilanvdla_main_119(%45, %39) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %47 = @tvmgen_default_ilanvdla_main_121(%46, %stage4_unit1_bn1_gamma, %stage4_unit1_bn1_beta, %stage4_unit1_bn1_moving_mean, %stage4_unit1_bn1_moving_var) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %48 = @tvmgen_default_ilanvdla_main_126(%47) /* ty=Tensor[(1, 256, 8, 8), int16] */;
  %49 = @tvmgen_default_ilanvdla_main_127(%48, %stage4_unit1_conv1_weight) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %50 = @tvmgen_default_ilanvdla_main_129(%49, %stage4_unit1_bn2_gamma, %stage4_unit1_bn2_beta, %stage4_unit1_bn2_moving_mean, %stage4_unit1_bn2_moving_var) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %51 = @tvmgen_default_ilanvdla_main_134(%50) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %52 = @tvmgen_default_ilanvdla_main_135(%51, %stage4_unit1_conv2_weight) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %53 = @tvmgen_default_ilanvdla_main_138(%48, %stage4_unit1_sc_weight) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %54 = @tvmgen_default_ilanvdla_main_137(%52, %53) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %55 = @tvmgen_default_ilanvdla_main_141(%54, %stage4_unit2_bn1_gamma, %stage4_unit2_bn1_beta, %stage4_unit2_bn1_moving_mean, %stage4_unit2_bn1_moving_var) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %56 = @tvmgen_default_ilanvdla_main_146(%55) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %57 = @tvmgen_default_ilanvdla_main_147(%56, %stage4_unit2_conv1_weight) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %58 = @tvmgen_default_ilanvdla_main_149(%57, %stage4_unit2_bn2_gamma, %stage4_unit2_bn2_beta, %stage4_unit2_bn2_moving_mean, %stage4_unit2_bn2_moving_var) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %59 = @tvmgen_default_ilanvdla_main_154(%58) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %60 = @tvmgen_default_ilanvdla_main_155(%59, %stage4_unit2_conv2_weight) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %61 = @tvmgen_default_ilanvdla_main_157(%60, %54) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %62 = @tvmgen_default_ilanvdla_main_159(%61, %bn1_gamma, %bn1_beta, %bn1_moving_mean, %bn1_moving_var) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %63 = @tvmgen_default_ilanvdla_main_164(%62) /* ty=Tensor[(1, 512, 4, 4), int16] */;
  %64 = nn.global_avg_pool2d(%63, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 1, 1), int16] */;
  %65 = nn.batch_flatten(%64, Tensor[(1, 512, 1, 1), int16]) /* ty=Tensor[(1, 512), int16] */;
  %66 = nn.dense(%65, %fc1_weight, Tensor[(1, 512), int16], Tensor[(10, 512), int16], units=10) /* ty=Tensor[(1, 10), int16] */;
  %67 = @tvmgen_default_ilanvdla_main_165(%66, %fc1_bias) /* ty=Tensor[(1, 10), int16] */;
  %68 = cast(%67, Tensor[(1, 10), int16], dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  %69 = nn.softmax(%68, Tensor[(1, 10), float32]) /* ty=Tensor[(1, 10), float32] */;
  cast(%69, Tensor[(1, 10), float32], dtype="int16") /* ty=Tensor[(1, 10), int16] */
}

def @tvmgen_default_ilanvdla_main_0(%ilanvdla_0_i0: Tensor[(1, 3, 32, 32), int16], %ilanvdla_0_i1: Tensor[(3), int16], %ilanvdla_0_i2: Tensor[(3), int16], %ilanvdla_0_i3: Tensor[(3), int16], %ilanvdla_0_i4: Tensor[(3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_0", Primitive=1) -> Tensor[(1, 3, 32, 32), int16] {
  %71 = fn (%FunctionVar_17_0: Tensor[(1, 3, 32, 32), int16], %FunctionVar_17_1: Tensor[(3), int16], %FunctionVar_17_2: Tensor[(3), int16], %FunctionVar_17_3: Tensor[(3), int16], %FunctionVar_17_4: Tensor[(3), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 3, 32, 32), int16] {
    %70 = nn.batch_norm(%FunctionVar_17_0, %FunctionVar_17_1, %FunctionVar_17_2, %FunctionVar_17_3, %FunctionVar_17_4, Tensor[(1, 3, 32, 32), int16], Tensor[(3), int16], Tensor[(3), int16], Tensor[(3), int16], Tensor[(3), int16], epsilon=0f, scale=False) /* ty=(Tensor[(1, 3, 32, 32), int16], Tensor[(3), int16], Tensor[(3), int16]) */;
    %70.0
  };
  %71(%ilanvdla_0_i0, %ilanvdla_0_i1, %ilanvdla_0_i2, %ilanvdla_0_i3, %ilanvdla_0_i4) /* ty=Tensor[(1, 3, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_100(%ilanvdla_100_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_100_i1: Tensor[(256, 128, 1, 1), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_100", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %72 = fn (%FunctionVar_7_0: Tensor[(1, 128, 16, 16), int16], %FunctionVar_7_1: Tensor[(256, 128, 1, 1), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 256, 8, 8), int16] {
    nn.conv2d(%FunctionVar_7_0, %FunctionVar_7_1, Tensor[(1, 128, 16, 16), int16], Tensor[(256, 128, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %72(%ilanvdla_100_i0, %ilanvdla_100_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_103(%ilanvdla_103_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_103_i1: Tensor[(256), int16], %ilanvdla_103_i2: Tensor[(256), int16], %ilanvdla_103_i3: Tensor[(256), int16], %ilanvdla_103_i4: Tensor[(256), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_103", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %74 = fn (%FunctionVar_6_0: Tensor[(1, 256, 8, 8), int16], %FunctionVar_6_1: Tensor[(256), int16], %FunctionVar_6_2: Tensor[(256), int16], %FunctionVar_6_3: Tensor[(256), int16], %FunctionVar_6_4: Tensor[(256), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 256, 8, 8), int16] {
    %73 = nn.batch_norm(%FunctionVar_6_0, %FunctionVar_6_1, %FunctionVar_6_2, %FunctionVar_6_3, %FunctionVar_6_4, Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
    %73.0
  };
  %74(%ilanvdla_103_i0, %ilanvdla_103_i1, %ilanvdla_103_i2, %ilanvdla_103_i3, %ilanvdla_103_i4) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_108(%ilanvdla_108_i0: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_108", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %75 = fn (%FunctionVar_6_01: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 256, 8, 8), int16] {
    nn.relu(%FunctionVar_6_01, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %75(%ilanvdla_108_i0) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_109(%ilanvdla_109_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_109_i1: Tensor[(256, 256, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_109", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %76 = fn (%FunctionVar_6_02: Tensor[(1, 256, 8, 8), int16], %FunctionVar_6_11: Tensor[(256, 256, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 256, 8, 8), int16] {
    nn.conv2d(%FunctionVar_6_02, %FunctionVar_6_11, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %76(%ilanvdla_109_i0, %ilanvdla_109_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_111(%ilanvdla_111_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_111_i1: Tensor[(256), int16], %ilanvdla_111_i2: Tensor[(256), int16], %ilanvdla_111_i3: Tensor[(256), int16], %ilanvdla_111_i4: Tensor[(256), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_111", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %78 = fn (%FunctionVar_5_0: Tensor[(1, 256, 8, 8), int16], %FunctionVar_5_1: Tensor[(256), int16], %FunctionVar_5_2: Tensor[(256), int16], %FunctionVar_5_3: Tensor[(256), int16], %FunctionVar_5_4: Tensor[(256), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 256, 8, 8), int16] {
    %77 = nn.batch_norm(%FunctionVar_5_0, %FunctionVar_5_1, %FunctionVar_5_2, %FunctionVar_5_3, %FunctionVar_5_4, Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
    %77.0
  };
  %78(%ilanvdla_111_i0, %ilanvdla_111_i1, %ilanvdla_111_i2, %ilanvdla_111_i3, %ilanvdla_111_i4) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_116(%ilanvdla_116_i0: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_116", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %79 = fn (%FunctionVar_5_01: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 256, 8, 8), int16] {
    nn.relu(%FunctionVar_5_01, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %79(%ilanvdla_116_i0) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_117(%ilanvdla_117_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_117_i1: Tensor[(256, 256, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_117", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %80 = fn (%FunctionVar_5_02: Tensor[(1, 256, 8, 8), int16], %FunctionVar_5_11: Tensor[(256, 256, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 256, 8, 8), int16] {
    nn.conv2d(%FunctionVar_5_02, %FunctionVar_5_11, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %80(%ilanvdla_117_i0, %ilanvdla_117_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_119(%ilanvdla_119_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_119_i1: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_119", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %81 = fn (%FunctionVar_2_0: Tensor[(1, 256, 8, 8), int16], %FunctionVar_2_1: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 256, 8, 8), int16] {
    add(%FunctionVar_2_0, %FunctionVar_2_1, Tensor[(1, 256, 8, 8), int16], Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %81(%ilanvdla_119_i0, %ilanvdla_119_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_12(%ilanvdla_12_i0: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_12", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %82 = fn (%FunctionVar_16_0: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 64, 32, 32), int16] {
    nn.relu(%FunctionVar_16_0, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %82(%ilanvdla_12_i0) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_121(%ilanvdla_121_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_121_i1: Tensor[(256), int16], %ilanvdla_121_i2: Tensor[(256), int16], %ilanvdla_121_i3: Tensor[(256), int16], %ilanvdla_121_i4: Tensor[(256), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_121", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %84 = fn (%FunctionVar_4_0: Tensor[(1, 256, 8, 8), int16], %FunctionVar_4_1: Tensor[(256), int16], %FunctionVar_4_2: Tensor[(256), int16], %FunctionVar_4_3: Tensor[(256), int16], %FunctionVar_4_4: Tensor[(256), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 256, 8, 8), int16] {
    %83 = nn.batch_norm(%FunctionVar_4_0, %FunctionVar_4_1, %FunctionVar_4_2, %FunctionVar_4_3, %FunctionVar_4_4, Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
    %83.0
  };
  %84(%ilanvdla_121_i0, %ilanvdla_121_i1, %ilanvdla_121_i2, %ilanvdla_121_i3, %ilanvdla_121_i4) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_126(%ilanvdla_126_i0: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_126", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %85 = fn (%FunctionVar_4_01: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 256, 8, 8), int16] {
    nn.relu(%FunctionVar_4_01, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %85(%ilanvdla_126_i0) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_127(%ilanvdla_127_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_127_i1: Tensor[(512, 256, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_127", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %86 = fn (%FunctionVar_4_02: Tensor[(1, 256, 8, 8), int16], %FunctionVar_4_11: Tensor[(512, 256, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 512, 4, 4), int16] {
    nn.conv2d(%FunctionVar_4_02, %FunctionVar_4_11, Tensor[(1, 256, 8, 8), int16], Tensor[(512, 256, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %86(%ilanvdla_127_i0, %ilanvdla_127_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_129(%ilanvdla_129_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_129_i1: Tensor[(512), int16], %ilanvdla_129_i2: Tensor[(512), int16], %ilanvdla_129_i3: Tensor[(512), int16], %ilanvdla_129_i4: Tensor[(512), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_129", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %88 = fn (%FunctionVar_3_0: Tensor[(1, 512, 4, 4), int16], %FunctionVar_3_1: Tensor[(512), int16], %FunctionVar_3_2: Tensor[(512), int16], %FunctionVar_3_3: Tensor[(512), int16], %FunctionVar_3_4: Tensor[(512), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 512, 4, 4), int16] {
    %87 = nn.batch_norm(%FunctionVar_3_0, %FunctionVar_3_1, %FunctionVar_3_2, %FunctionVar_3_3, %FunctionVar_3_4, Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
    %87.0
  };
  %88(%ilanvdla_129_i0, %ilanvdla_129_i1, %ilanvdla_129_i2, %ilanvdla_129_i3, %ilanvdla_129_i4) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_13(%ilanvdla_13_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_13_i1: Tensor[(64, 64, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_13", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %89 = fn (%FunctionVar_19_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_19_1: Tensor[(64, 64, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_19_0, %FunctionVar_19_1, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %89(%ilanvdla_13_i0, %ilanvdla_13_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_134(%ilanvdla_134_i0: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_134", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %90 = fn (%FunctionVar_3_01: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 512, 4, 4), int16] {
    nn.relu(%FunctionVar_3_01, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %90(%ilanvdla_134_i0) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_135(%ilanvdla_135_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_135_i1: Tensor[(512, 512, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_135", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %91 = fn (%FunctionVar_3_02: Tensor[(1, 512, 4, 4), int16], %FunctionVar_3_11: Tensor[(512, 512, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 512, 4, 4), int16] {
    nn.conv2d(%FunctionVar_3_02, %FunctionVar_3_11, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %91(%ilanvdla_135_i0, %ilanvdla_135_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_137(%ilanvdla_137_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_137_i1: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_137", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %92 = fn (%FunctionVar_1_0: Tensor[(1, 512, 4, 4), int16], %FunctionVar_1_1: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 512, 4, 4), int16] {
    add(%FunctionVar_1_0, %FunctionVar_1_1, Tensor[(1, 512, 4, 4), int16], Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %92(%ilanvdla_137_i0, %ilanvdla_137_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_138(%ilanvdla_138_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_138_i1: Tensor[(512, 256, 1, 1), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_138", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %93 = fn (%FunctionVar_2_01: Tensor[(1, 256, 8, 8), int16], %FunctionVar_2_11: Tensor[(512, 256, 1, 1), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 512, 4, 4), int16] {
    nn.conv2d(%FunctionVar_2_01, %FunctionVar_2_11, Tensor[(1, 256, 8, 8), int16], Tensor[(512, 256, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %93(%ilanvdla_138_i0, %ilanvdla_138_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_141(%ilanvdla_141_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_141_i1: Tensor[(512), int16], %ilanvdla_141_i2: Tensor[(512), int16], %ilanvdla_141_i3: Tensor[(512), int16], %ilanvdla_141_i4: Tensor[(512), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_141", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %95 = fn (%FunctionVar_2_02: Tensor[(1, 512, 4, 4), int16], %FunctionVar_2_12: Tensor[(512), int16], %FunctionVar_2_2: Tensor[(512), int16], %FunctionVar_2_3: Tensor[(512), int16], %FunctionVar_2_4: Tensor[(512), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 512, 4, 4), int16] {
    %94 = nn.batch_norm(%FunctionVar_2_02, %FunctionVar_2_12, %FunctionVar_2_2, %FunctionVar_2_3, %FunctionVar_2_4, Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
    %94.0
  };
  %95(%ilanvdla_141_i0, %ilanvdla_141_i1, %ilanvdla_141_i2, %ilanvdla_141_i3, %ilanvdla_141_i4) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_146(%ilanvdla_146_i0: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_146", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %96 = fn (%FunctionVar_2_03: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 512, 4, 4), int16] {
    nn.relu(%FunctionVar_2_03, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %96(%ilanvdla_146_i0) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_147(%ilanvdla_147_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_147_i1: Tensor[(512, 512, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_147", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %97 = fn (%FunctionVar_1_01: Tensor[(1, 512, 4, 4), int16], %FunctionVar_1_11: Tensor[(512, 512, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 512, 4, 4), int16] {
    nn.conv2d(%FunctionVar_1_01, %FunctionVar_1_11, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %97(%ilanvdla_147_i0, %ilanvdla_147_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_149(%ilanvdla_149_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_149_i1: Tensor[(512), int16], %ilanvdla_149_i2: Tensor[(512), int16], %ilanvdla_149_i3: Tensor[(512), int16], %ilanvdla_149_i4: Tensor[(512), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_149", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %99 = fn (%FunctionVar_1_02: Tensor[(1, 512, 4, 4), int16], %FunctionVar_1_12: Tensor[(512), int16], %FunctionVar_1_2: Tensor[(512), int16], %FunctionVar_1_3: Tensor[(512), int16], %FunctionVar_1_4: Tensor[(512), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 512, 4, 4), int16] {
    %98 = nn.batch_norm(%FunctionVar_1_02, %FunctionVar_1_12, %FunctionVar_1_2, %FunctionVar_1_3, %FunctionVar_1_4, Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
    %98.0
  };
  %99(%ilanvdla_149_i0, %ilanvdla_149_i1, %ilanvdla_149_i2, %ilanvdla_149_i3, %ilanvdla_149_i4) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_15(%ilanvdla_15_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_15_i1: Tensor[(64), int16], %ilanvdla_15_i2: Tensor[(64), int16], %ilanvdla_15_i3: Tensor[(64), int16], %ilanvdla_15_i4: Tensor[(64), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_15", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %101 = fn (%FunctionVar_15_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_15_1: Tensor[(64), int16], %FunctionVar_15_2: Tensor[(64), int16], %FunctionVar_15_3: Tensor[(64), int16], %FunctionVar_15_4: Tensor[(64), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 64, 32, 32), int16] {
    %100 = nn.batch_norm(%FunctionVar_15_0, %FunctionVar_15_1, %FunctionVar_15_2, %FunctionVar_15_3, %FunctionVar_15_4, Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
    %100.0
  };
  %101(%ilanvdla_15_i0, %ilanvdla_15_i1, %ilanvdla_15_i2, %ilanvdla_15_i3, %ilanvdla_15_i4) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_154(%ilanvdla_154_i0: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_154", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %102 = fn (%FunctionVar_1_03: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 512, 4, 4), int16] {
    nn.relu(%FunctionVar_1_03, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %102(%ilanvdla_154_i0) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_155(%ilanvdla_155_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_155_i1: Tensor[(512, 512, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_155", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %103 = fn (%FunctionVar_0_0: Tensor[(1, 512, 4, 4), int16], %FunctionVar_0_1: Tensor[(512, 512, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 512, 4, 4), int16] {
    nn.conv2d(%FunctionVar_0_0, %FunctionVar_0_1, Tensor[(1, 512, 4, 4), int16], Tensor[(512, 512, 3, 3), int16], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %103(%ilanvdla_155_i0, %ilanvdla_155_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_157(%ilanvdla_157_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_157_i1: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_157", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %104 = fn (%FunctionVar_0_01: Tensor[(1, 512, 4, 4), int16], %FunctionVar_0_11: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 512, 4, 4), int16] {
    add(%FunctionVar_0_01, %FunctionVar_0_11, Tensor[(1, 512, 4, 4), int16], Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %104(%ilanvdla_157_i0, %ilanvdla_157_i1) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_159(%ilanvdla_159_i0: Tensor[(1, 512, 4, 4), int16], %ilanvdla_159_i1: Tensor[(512), int16], %ilanvdla_159_i2: Tensor[(512), int16], %ilanvdla_159_i3: Tensor[(512), int16], %ilanvdla_159_i4: Tensor[(512), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_159", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %106 = fn (%FunctionVar_0_02: Tensor[(1, 512, 4, 4), int16], %FunctionVar_0_12: Tensor[(512), int16], %FunctionVar_0_2: Tensor[(512), int16], %FunctionVar_0_3: Tensor[(512), int16], %FunctionVar_0_4: Tensor[(512), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 512, 4, 4), int16] {
    %105 = nn.batch_norm(%FunctionVar_0_02, %FunctionVar_0_12, %FunctionVar_0_2, %FunctionVar_0_3, %FunctionVar_0_4, Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], Tensor[(512), int16], epsilon=0f) /* ty=(Tensor[(1, 512, 4, 4), int16], Tensor[(512), int16], Tensor[(512), int16]) */;
    %105.0
  };
  %106(%ilanvdla_159_i0, %ilanvdla_159_i1, %ilanvdla_159_i2, %ilanvdla_159_i3, %ilanvdla_159_i4) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_164(%ilanvdla_164_i0: Tensor[(1, 512, 4, 4), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_164", Primitive=1) -> Tensor[(1, 512, 4, 4), int16] {
  %107 = fn (%FunctionVar_0_03: Tensor[(1, 512, 4, 4), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 512, 4, 4), int16] {
    nn.relu(%FunctionVar_0_03, Tensor[(1, 512, 4, 4), int16]) /* ty=Tensor[(1, 512, 4, 4), int16] */
  };
  %107(%ilanvdla_164_i0) /* ty=Tensor[(1, 512, 4, 4), int16] */
}

def @tvmgen_default_ilanvdla_main_165(%ilanvdla_165_i0: Tensor[(1, 10), int16], %ilanvdla_165_i1: Tensor[(10), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_165", Primitive=1) -> Tensor[(1, 10), int16] {
  %108 = fn (%FunctionVar_0_04: Tensor[(1, 10), int16], %FunctionVar_0_13: Tensor[(10), int16], PartitionedFromPattern="nn.bias_add_", Composite="ilanvdla.sdp.channel_bias_add") -> Tensor[(1, 10), int16] {
    nn.bias_add(%FunctionVar_0_04, %FunctionVar_0_13, Tensor[(1, 10), int16], Tensor[(10), int16], axis=-1) /* ty=Tensor[(1, 10), int16] */
  };
  %108(%ilanvdla_165_i0, %ilanvdla_165_i1) /* ty=Tensor[(1, 10), int16] */
}

def @tvmgen_default_ilanvdla_main_20(%ilanvdla_20_i0: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_20", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %109 = fn (%FunctionVar_15_01: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 64, 32, 32), int16] {
    nn.relu(%FunctionVar_15_01, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %109(%ilanvdla_20_i0) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_21(%ilanvdla_21_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_21_i1: Tensor[(64, 64, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_21", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %110 = fn (%FunctionVar_18_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_18_1: Tensor[(64, 64, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_18_0, %FunctionVar_18_1, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %110(%ilanvdla_21_i0, %ilanvdla_21_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_23(%ilanvdla_23_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_23_i1: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_23", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %111 = fn (%FunctionVar_7_01: Tensor[(1, 64, 32, 32), int16], %FunctionVar_7_11: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 64, 32, 32), int16] {
    add(%FunctionVar_7_01, %FunctionVar_7_11, Tensor[(1, 64, 32, 32), int16], Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %111(%ilanvdla_23_i0, %ilanvdla_23_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_24(%ilanvdla_24_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_24_i1: Tensor[(64, 64, 1, 1), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_24", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %112 = fn (%FunctionVar_17_01: Tensor[(1, 64, 32, 32), int16], %FunctionVar_17_11: Tensor[(64, 64, 1, 1), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_17_01, %FunctionVar_17_11, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 1, 1), int16], padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %112(%ilanvdla_24_i0, %ilanvdla_24_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_27(%ilanvdla_27_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_27_i1: Tensor[(64), int16], %ilanvdla_27_i2: Tensor[(64), int16], %ilanvdla_27_i3: Tensor[(64), int16], %ilanvdla_27_i4: Tensor[(64), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_27", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %114 = fn (%FunctionVar_14_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_14_1: Tensor[(64), int16], %FunctionVar_14_2: Tensor[(64), int16], %FunctionVar_14_3: Tensor[(64), int16], %FunctionVar_14_4: Tensor[(64), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 64, 32, 32), int16] {
    %113 = nn.batch_norm(%FunctionVar_14_0, %FunctionVar_14_1, %FunctionVar_14_2, %FunctionVar_14_3, %FunctionVar_14_4, Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
    %113.0
  };
  %114(%ilanvdla_27_i0, %ilanvdla_27_i1, %ilanvdla_27_i2, %ilanvdla_27_i3, %ilanvdla_27_i4) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_32(%ilanvdla_32_i0: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_32", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %115 = fn (%FunctionVar_14_01: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 64, 32, 32), int16] {
    nn.relu(%FunctionVar_14_01, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %115(%ilanvdla_32_i0) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_33(%ilanvdla_33_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_33_i1: Tensor[(64, 64, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_33", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %116 = fn (%FunctionVar_16_01: Tensor[(1, 64, 32, 32), int16], %FunctionVar_16_1: Tensor[(64, 64, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_16_01, %FunctionVar_16_1, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %116(%ilanvdla_33_i0, %ilanvdla_33_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_35(%ilanvdla_35_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_35_i1: Tensor[(64), int16], %ilanvdla_35_i2: Tensor[(64), int16], %ilanvdla_35_i3: Tensor[(64), int16], %ilanvdla_35_i4: Tensor[(64), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_35", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %118 = fn (%FunctionVar_13_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_13_1: Tensor[(64), int16], %FunctionVar_13_2: Tensor[(64), int16], %FunctionVar_13_3: Tensor[(64), int16], %FunctionVar_13_4: Tensor[(64), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 64, 32, 32), int16] {
    %117 = nn.batch_norm(%FunctionVar_13_0, %FunctionVar_13_1, %FunctionVar_13_2, %FunctionVar_13_3, %FunctionVar_13_4, Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
    %117.0
  };
  %118(%ilanvdla_35_i0, %ilanvdla_35_i1, %ilanvdla_35_i2, %ilanvdla_35_i3, %ilanvdla_35_i4) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_40(%ilanvdla_40_i0: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_40", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %119 = fn (%FunctionVar_13_01: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 64, 32, 32), int16] {
    nn.relu(%FunctionVar_13_01, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %119(%ilanvdla_40_i0) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_41(%ilanvdla_41_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_41_i1: Tensor[(64, 64, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_41", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %120 = fn (%FunctionVar_15_02: Tensor[(1, 64, 32, 32), int16], %FunctionVar_15_11: Tensor[(64, 64, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_15_02, %FunctionVar_15_11, Tensor[(1, 64, 32, 32), int16], Tensor[(64, 64, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %120(%ilanvdla_41_i0, %ilanvdla_41_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_43(%ilanvdla_43_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_43_i1: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_43", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %121 = fn (%FunctionVar_6_03: Tensor[(1, 64, 32, 32), int16], %FunctionVar_6_12: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 64, 32, 32), int16] {
    add(%FunctionVar_6_03, %FunctionVar_6_12, Tensor[(1, 64, 32, 32), int16], Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %121(%ilanvdla_43_i0, %ilanvdla_43_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_45(%ilanvdla_45_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_45_i1: Tensor[(64), int16], %ilanvdla_45_i2: Tensor[(64), int16], %ilanvdla_45_i3: Tensor[(64), int16], %ilanvdla_45_i4: Tensor[(64), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_45", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %123 = fn (%FunctionVar_12_0: Tensor[(1, 64, 32, 32), int16], %FunctionVar_12_1: Tensor[(64), int16], %FunctionVar_12_2: Tensor[(64), int16], %FunctionVar_12_3: Tensor[(64), int16], %FunctionVar_12_4: Tensor[(64), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 64, 32, 32), int16] {
    %122 = nn.batch_norm(%FunctionVar_12_0, %FunctionVar_12_1, %FunctionVar_12_2, %FunctionVar_12_3, %FunctionVar_12_4, Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
    %122.0
  };
  %123(%ilanvdla_45_i0, %ilanvdla_45_i1, %ilanvdla_45_i2, %ilanvdla_45_i3, %ilanvdla_45_i4) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_5(%ilanvdla_5_i0: Tensor[(1, 3, 32, 32), int16], %ilanvdla_5_i1: Tensor[(64, 3, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_5", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %124 = fn (%FunctionVar_20_0: Tensor[(1, 3, 32, 32), int16], %FunctionVar_20_1: Tensor[(64, 3, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 64, 32, 32), int16] {
    nn.conv2d(%FunctionVar_20_0, %FunctionVar_20_1, Tensor[(1, 3, 32, 32), int16], Tensor[(64, 3, 3, 3), int16], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %124(%ilanvdla_5_i0, %ilanvdla_5_i1) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_50(%ilanvdla_50_i0: Tensor[(1, 64, 32, 32), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_50", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %125 = fn (%FunctionVar_12_01: Tensor[(1, 64, 32, 32), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 64, 32, 32), int16] {
    nn.relu(%FunctionVar_12_01, Tensor[(1, 64, 32, 32), int16]) /* ty=Tensor[(1, 64, 32, 32), int16] */
  };
  %125(%ilanvdla_50_i0) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_51(%ilanvdla_51_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_51_i1: Tensor[(128, 64, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_51", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %126 = fn (%FunctionVar_14_02: Tensor[(1, 64, 32, 32), int16], %FunctionVar_14_11: Tensor[(128, 64, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 128, 16, 16), int16] {
    nn.conv2d(%FunctionVar_14_02, %FunctionVar_14_11, Tensor[(1, 64, 32, 32), int16], Tensor[(128, 64, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %126(%ilanvdla_51_i0, %ilanvdla_51_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_53(%ilanvdla_53_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_53_i1: Tensor[(128), int16], %ilanvdla_53_i2: Tensor[(128), int16], %ilanvdla_53_i3: Tensor[(128), int16], %ilanvdla_53_i4: Tensor[(128), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_53", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %128 = fn (%FunctionVar_11_0: Tensor[(1, 128, 16, 16), int16], %FunctionVar_11_1: Tensor[(128), int16], %FunctionVar_11_2: Tensor[(128), int16], %FunctionVar_11_3: Tensor[(128), int16], %FunctionVar_11_4: Tensor[(128), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 128, 16, 16), int16] {
    %127 = nn.batch_norm(%FunctionVar_11_0, %FunctionVar_11_1, %FunctionVar_11_2, %FunctionVar_11_3, %FunctionVar_11_4, Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
    %127.0
  };
  %128(%ilanvdla_53_i0, %ilanvdla_53_i1, %ilanvdla_53_i2, %ilanvdla_53_i3, %ilanvdla_53_i4) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_58(%ilanvdla_58_i0: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_58", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %129 = fn (%FunctionVar_11_01: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 128, 16, 16), int16] {
    nn.relu(%FunctionVar_11_01, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %129(%ilanvdla_58_i0) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_59(%ilanvdla_59_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_59_i1: Tensor[(128, 128, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_59", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %130 = fn (%FunctionVar_13_02: Tensor[(1, 128, 16, 16), int16], %FunctionVar_13_11: Tensor[(128, 128, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 128, 16, 16), int16] {
    nn.conv2d(%FunctionVar_13_02, %FunctionVar_13_11, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %130(%ilanvdla_59_i0, %ilanvdla_59_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_61(%ilanvdla_61_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_61_i1: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_61", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %131 = fn (%FunctionVar_5_03: Tensor[(1, 128, 16, 16), int16], %FunctionVar_5_12: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 128, 16, 16), int16] {
    add(%FunctionVar_5_03, %FunctionVar_5_12, Tensor[(1, 128, 16, 16), int16], Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %131(%ilanvdla_61_i0, %ilanvdla_61_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_62(%ilanvdla_62_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_62_i1: Tensor[(128, 64, 1, 1), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_62", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %132 = fn (%FunctionVar_12_02: Tensor[(1, 64, 32, 32), int16], %FunctionVar_12_11: Tensor[(128, 64, 1, 1), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 128, 16, 16), int16] {
    nn.conv2d(%FunctionVar_12_02, %FunctionVar_12_11, Tensor[(1, 64, 32, 32), int16], Tensor[(128, 64, 1, 1), int16], strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %132(%ilanvdla_62_i0, %ilanvdla_62_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_65(%ilanvdla_65_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_65_i1: Tensor[(128), int16], %ilanvdla_65_i2: Tensor[(128), int16], %ilanvdla_65_i3: Tensor[(128), int16], %ilanvdla_65_i4: Tensor[(128), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_65", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %134 = fn (%FunctionVar_10_0: Tensor[(1, 128, 16, 16), int16], %FunctionVar_10_1: Tensor[(128), int16], %FunctionVar_10_2: Tensor[(128), int16], %FunctionVar_10_3: Tensor[(128), int16], %FunctionVar_10_4: Tensor[(128), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 128, 16, 16), int16] {
    %133 = nn.batch_norm(%FunctionVar_10_0, %FunctionVar_10_1, %FunctionVar_10_2, %FunctionVar_10_3, %FunctionVar_10_4, Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
    %133.0
  };
  %134(%ilanvdla_65_i0, %ilanvdla_65_i1, %ilanvdla_65_i2, %ilanvdla_65_i3, %ilanvdla_65_i4) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_7(%ilanvdla_7_i0: Tensor[(1, 64, 32, 32), int16], %ilanvdla_7_i1: Tensor[(64), int16], %ilanvdla_7_i2: Tensor[(64), int16], %ilanvdla_7_i3: Tensor[(64), int16], %ilanvdla_7_i4: Tensor[(64), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_7", Primitive=1) -> Tensor[(1, 64, 32, 32), int16] {
  %136 = fn (%FunctionVar_16_02: Tensor[(1, 64, 32, 32), int16], %FunctionVar_16_11: Tensor[(64), int16], %FunctionVar_16_2: Tensor[(64), int16], %FunctionVar_16_3: Tensor[(64), int16], %FunctionVar_16_4: Tensor[(64), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 64, 32, 32), int16] {
    %135 = nn.batch_norm(%FunctionVar_16_02, %FunctionVar_16_11, %FunctionVar_16_2, %FunctionVar_16_3, %FunctionVar_16_4, Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], Tensor[(64), int16], epsilon=0f) /* ty=(Tensor[(1, 64, 32, 32), int16], Tensor[(64), int16], Tensor[(64), int16]) */;
    %135.0
  };
  %136(%ilanvdla_7_i0, %ilanvdla_7_i1, %ilanvdla_7_i2, %ilanvdla_7_i3, %ilanvdla_7_i4) /* ty=Tensor[(1, 64, 32, 32), int16] */
}

def @tvmgen_default_ilanvdla_main_70(%ilanvdla_70_i0: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_70", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %137 = fn (%FunctionVar_10_01: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 128, 16, 16), int16] {
    nn.relu(%FunctionVar_10_01, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %137(%ilanvdla_70_i0) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_71(%ilanvdla_71_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_71_i1: Tensor[(128, 128, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_71", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %138 = fn (%FunctionVar_11_02: Tensor[(1, 128, 16, 16), int16], %FunctionVar_11_11: Tensor[(128, 128, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 128, 16, 16), int16] {
    nn.conv2d(%FunctionVar_11_02, %FunctionVar_11_11, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %138(%ilanvdla_71_i0, %ilanvdla_71_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_73(%ilanvdla_73_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_73_i1: Tensor[(128), int16], %ilanvdla_73_i2: Tensor[(128), int16], %ilanvdla_73_i3: Tensor[(128), int16], %ilanvdla_73_i4: Tensor[(128), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_73", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %140 = fn (%FunctionVar_9_0: Tensor[(1, 128, 16, 16), int16], %FunctionVar_9_1: Tensor[(128), int16], %FunctionVar_9_2: Tensor[(128), int16], %FunctionVar_9_3: Tensor[(128), int16], %FunctionVar_9_4: Tensor[(128), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 128, 16, 16), int16] {
    %139 = nn.batch_norm(%FunctionVar_9_0, %FunctionVar_9_1, %FunctionVar_9_2, %FunctionVar_9_3, %FunctionVar_9_4, Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
    %139.0
  };
  %140(%ilanvdla_73_i0, %ilanvdla_73_i1, %ilanvdla_73_i2, %ilanvdla_73_i3, %ilanvdla_73_i4) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_78(%ilanvdla_78_i0: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_78", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %141 = fn (%FunctionVar_9_01: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 128, 16, 16), int16] {
    nn.relu(%FunctionVar_9_01, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %141(%ilanvdla_78_i0) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_79(%ilanvdla_79_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_79_i1: Tensor[(128, 128, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_79", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %142 = fn (%FunctionVar_10_02: Tensor[(1, 128, 16, 16), int16], %FunctionVar_10_11: Tensor[(128, 128, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 128, 16, 16), int16] {
    nn.conv2d(%FunctionVar_10_02, %FunctionVar_10_11, Tensor[(1, 128, 16, 16), int16], Tensor[(128, 128, 3, 3), int16], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %142(%ilanvdla_79_i0, %ilanvdla_79_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_81(%ilanvdla_81_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_81_i1: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_81", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %143 = fn (%FunctionVar_4_03: Tensor[(1, 128, 16, 16), int16], %FunctionVar_4_12: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 128, 16, 16), int16] {
    add(%FunctionVar_4_03, %FunctionVar_4_12, Tensor[(1, 128, 16, 16), int16], Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %143(%ilanvdla_81_i0, %ilanvdla_81_i1) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_83(%ilanvdla_83_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_83_i1: Tensor[(128), int16], %ilanvdla_83_i2: Tensor[(128), int16], %ilanvdla_83_i3: Tensor[(128), int16], %ilanvdla_83_i4: Tensor[(128), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_83", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %145 = fn (%FunctionVar_8_0: Tensor[(1, 128, 16, 16), int16], %FunctionVar_8_1: Tensor[(128), int16], %FunctionVar_8_2: Tensor[(128), int16], %FunctionVar_8_3: Tensor[(128), int16], %FunctionVar_8_4: Tensor[(128), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 128, 16, 16), int16] {
    %144 = nn.batch_norm(%FunctionVar_8_0, %FunctionVar_8_1, %FunctionVar_8_2, %FunctionVar_8_3, %FunctionVar_8_4, Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], Tensor[(128), int16], epsilon=0f) /* ty=(Tensor[(1, 128, 16, 16), int16], Tensor[(128), int16], Tensor[(128), int16]) */;
    %144.0
  };
  %145(%ilanvdla_83_i0, %ilanvdla_83_i1, %ilanvdla_83_i2, %ilanvdla_83_i3, %ilanvdla_83_i4) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_88(%ilanvdla_88_i0: Tensor[(1, 128, 16, 16), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_88", Primitive=1) -> Tensor[(1, 128, 16, 16), int16] {
  %146 = fn (%FunctionVar_8_01: Tensor[(1, 128, 16, 16), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 128, 16, 16), int16] {
    nn.relu(%FunctionVar_8_01, Tensor[(1, 128, 16, 16), int16]) /* ty=Tensor[(1, 128, 16, 16), int16] */
  };
  %146(%ilanvdla_88_i0) /* ty=Tensor[(1, 128, 16, 16), int16] */
}

def @tvmgen_default_ilanvdla_main_89(%ilanvdla_89_i0: Tensor[(1, 128, 16, 16), int16], %ilanvdla_89_i1: Tensor[(256, 128, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_89", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %147 = fn (%FunctionVar_9_02: Tensor[(1, 128, 16, 16), int16], %FunctionVar_9_11: Tensor[(256, 128, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 256, 8, 8), int16] {
    nn.conv2d(%FunctionVar_9_02, %FunctionVar_9_11, Tensor[(1, 128, 16, 16), int16], Tensor[(256, 128, 3, 3), int16], strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %147(%ilanvdla_89_i0, %ilanvdla_89_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_91(%ilanvdla_91_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_91_i1: Tensor[(256), int16], %ilanvdla_91_i2: Tensor[(256), int16], %ilanvdla_91_i3: Tensor[(256), int16], %ilanvdla_91_i4: Tensor[(256), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_91", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %149 = fn (%FunctionVar_7_02: Tensor[(1, 256, 8, 8), int16], %FunctionVar_7_12: Tensor[(256), int16], %FunctionVar_7_2: Tensor[(256), int16], %FunctionVar_7_3: Tensor[(256), int16], %FunctionVar_7_4: Tensor[(256), int16], PartitionedFromPattern="nn.batch_norm_TupleGetItem0_", Composite="ilanvdla.sdp.channel_batch_norm") -> Tensor[(1, 256, 8, 8), int16] {
    %148 = nn.batch_norm(%FunctionVar_7_02, %FunctionVar_7_12, %FunctionVar_7_2, %FunctionVar_7_3, %FunctionVar_7_4, Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], Tensor[(256), int16], epsilon=0f) /* ty=(Tensor[(1, 256, 8, 8), int16], Tensor[(256), int16], Tensor[(256), int16]) */;
    %148.0
  };
  %149(%ilanvdla_91_i0, %ilanvdla_91_i1, %ilanvdla_91_i2, %ilanvdla_91_i3, %ilanvdla_91_i4) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_96(%ilanvdla_96_i0: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_96", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %150 = fn (%FunctionVar_7_03: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="nn.relu_", Composite="ilanvdla.sdp.layer_relu") -> Tensor[(1, 256, 8, 8), int16] {
    nn.relu(%FunctionVar_7_03, Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %150(%ilanvdla_96_i0) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_97(%ilanvdla_97_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_97_i1: Tensor[(256, 256, 3, 3), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_97", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %151 = fn (%FunctionVar_8_02: Tensor[(1, 256, 8, 8), int16], %FunctionVar_8_11: Tensor[(256, 256, 3, 3), int16], PartitionedFromPattern="nn.conv2d_", Composite="ilanvdla.conv.conv2d") -> Tensor[(1, 256, 8, 8), int16] {
    nn.conv2d(%FunctionVar_8_02, %FunctionVar_8_11, Tensor[(1, 256, 8, 8), int16], Tensor[(256, 256, 3, 3), int16], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %151(%ilanvdla_97_i0, %ilanvdla_97_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

def @tvmgen_default_ilanvdla_main_99(%ilanvdla_99_i0: Tensor[(1, 256, 8, 8), int16], %ilanvdla_99_i1: Tensor[(1, 256, 8, 8), int16], Inline=1, Compiler="ilanvdla", global_symbol="tvmgen_default_ilanvdla_main_99", Primitive=1) -> Tensor[(1, 256, 8, 8), int16] {
  %152 = fn (%FunctionVar_3_03: Tensor[(1, 256, 8, 8), int16], %FunctionVar_3_12: Tensor[(1, 256, 8, 8), int16], PartitionedFromPattern="add_", Composite="ilanvdla.sdp.elemwise_add") -> Tensor[(1, 256, 8, 8), int16] {
    add(%FunctionVar_3_03, %FunctionVar_3_12, Tensor[(1, 256, 8, 8), int16], Tensor[(1, 256, 8, 8), int16]) /* ty=Tensor[(1, 256, 8, 8), int16] */
  };
  %152(%ilanvdla_99_i0, %ilanvdla_99_i1) /* ty=Tensor[(1, 256, 8, 8), int16] */
}

