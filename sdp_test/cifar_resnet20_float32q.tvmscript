#[version = "0.0.5"]
def @main(%serving_default_input_1:0: Tensor[(1, 32, 32, 3), float32], %v_param_1: Tensor[(3, 3, 3, 16), int8], %v_param_2: Tensor[(16), int32], %v_param_3: Tensor[(3, 3, 16, 16), int8], %v_param_4: Tensor[(16), int32], %v_param_5: Tensor[(3, 3, 16, 16), int8], %v_param_6: Tensor[(16), int32], %v_param_7: Tensor[(3, 3, 16, 16), int8], %v_param_8: Tensor[(16), int32], %v_param_9: Tensor[(3, 3, 16, 16), int8], %v_param_10: Tensor[(16), int32], %v_param_11: Tensor[(3, 3, 16, 16), int8], %v_param_12: Tensor[(16), int32], %v_param_13: Tensor[(3, 3, 16, 16), int8], %v_param_14: Tensor[(16), int32], %v_param_15: Tensor[(3, 3, 16, 32), int8], %v_param_16: Tensor[(32), int32], %v_param_17: Tensor[(3, 3, 32, 32), int8], %v_param_18: Tensor[(32), int32], %v_param_19: Tensor[(3, 3, 32, 32), int8], %v_param_20: Tensor[(32), int32], %v_param_21: Tensor[(3, 3, 32, 32), int8], %v_param_22: Tensor[(32), int32], %v_param_23: Tensor[(3, 3, 32, 32), int8], %v_param_24: Tensor[(32), int32], %v_param_25: Tensor[(3, 3, 32, 32), int8], %v_param_26: Tensor[(32), int32], %v_param_27: Tensor[(3, 3, 32, 64), int8], %v_param_28: Tensor[(64), int32], %v_param_29: Tensor[(3, 3, 64, 64), int8], %v_param_30: Tensor[(64), int32], %v_param_31: Tensor[(3, 3, 64, 64), int8], %v_param_32: Tensor[(64), int32], %v_param_33: Tensor[(3, 3, 64, 64), int8], %v_param_34: Tensor[(64), int32], %v_param_35: Tensor[(3, 3, 64, 64), int8], %v_param_36: Tensor[(64), int32], %v_param_37: Tensor[(3, 3, 64, 64), int8], %v_param_38: Tensor[(64), int32], %v_param_39: Tensor[(10, 64), int8], %v_param_40: Tensor[(10), int32]) -> Tensor[(1, 10), float32] {
  %0 = divide(%serving_default_input_1:0, 0.0203247f /* ty=float32 */) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %1 = cast(-8 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2 = add(%0, %1) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %3 = clip(%2, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %4 = round(%3) /* ty=Tensor[(1, 32, 32, 3), float32] */;
  %5 = cast(%4, dtype="int8") /* ty=Tensor[(1, 32, 32, 3), int8] */;
  %6 = nn.pad(%5, -8 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 3), int8] */;
  %7 = cast(%v_param_1, dtype="int32") /* ty=Tensor[(3, 3, 3, 16), int32] */;
  %8 = sum(%7, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %9 = reshape(%8, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %10 = nn.conv2d(%6, %v_param_1, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %11 = multiply(-8 /* ty=int32 */, %9) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %12 = subtract(%10, %11) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %13 = nn.bias_add(%12, %v_param_2, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %14 = cast(%13, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %15 = cast(%14, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %16 = multiply(%15, meta[relay.Constant][0] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %17 = add(%16, meta[relay.Constant][1] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %18 = right_shift(%17, meta[relay.Constant][2] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %19 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %20 = cast(%18, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %21 = add(%19, %20) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %22 = clip(%21, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %23 = cast(%22, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %24 = clip(%23, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %25 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %26 = expand_dims(%25, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %27 = cast(%24, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %28 = cast(%26, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %29 = subtract(%27, %28) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %30 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %31 = fixed_point_multiply(%29, multiplier=1520454153, shift=0) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %32 = nn.pad(%24, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %33 = cast(%v_param_3, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %34 = sum(%33, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %35 = reshape(%34, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %36 = nn.conv2d(%32, %v_param_3, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %37 = multiply(-128 /* ty=int32 */, %35) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %38 = subtract(%36, %37) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %39 = nn.bias_add(%38, %v_param_4, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %40 = cast(%39, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %41 = cast(%40, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %42 = multiply(%41, meta[relay.Constant][3] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %43 = add(%42, meta[relay.Constant][4] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %44 = right_shift(%43, meta[relay.Constant][5] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %45 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %46 = cast(%44, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %47 = add(%45, %46) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %48 = clip(%47, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %49 = cast(%48, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %50 = clip(%49, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %51 = nn.pad(%50, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %52 = cast(%v_param_5, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %53 = sum(%52, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %54 = reshape(%53, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %55 = nn.conv2d(%51, %v_param_5, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %56 = multiply(-128 /* ty=int32 */, %54) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %57 = subtract(%55, %56) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %58 = nn.bias_add(%57, %v_param_6, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %59 = cast(%58, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %60 = cast(%59, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %61 = multiply(%60, meta[relay.Constant][6] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %62 = add(%61, meta[relay.Constant][7] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %63 = right_shift(%62, meta[relay.Constant][8] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %64 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %65 = cast(%63, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %66 = add(%64, %65) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %67 = clip(%66, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %68 = cast(%67, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %69 = reshape(-1 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %70 = expand_dims(%69, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %71 = cast(%68, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %72 = cast(%70, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %73 = subtract(%71, %72) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %74 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %75 = fixed_point_multiply(%73, multiplier=1838094621, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %76 = add(%30, %31) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %77 = add(%74, %75) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %78 = add(%76, %77) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %79 = subtract(%78, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %80 = clip(%79, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %81 = cast(%80, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %82 = clip(%81, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %83 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %84 = expand_dims(%83, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %85 = cast(%82, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %86 = cast(%84, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %87 = subtract(%85, %86) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %88 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %89 = fixed_point_multiply(%87, multiplier=1083266204, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %90 = nn.pad(%82, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %91 = cast(%v_param_7, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %92 = sum(%91, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %93 = reshape(%92, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %94 = nn.conv2d(%90, %v_param_7, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %95 = multiply(-128 /* ty=int32 */, %93) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %96 = subtract(%94, %95) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %97 = nn.bias_add(%96, %v_param_8, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %98 = cast(%97, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %99 = cast(%98, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %100 = multiply(%99, meta[relay.Constant][9] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %101 = add(%100, meta[relay.Constant][10] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %102 = right_shift(%101, meta[relay.Constant][11] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %103 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %104 = cast(%102, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %105 = add(%103, %104) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %106 = clip(%105, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %107 = cast(%106, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %108 = clip(%107, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %109 = nn.pad(%108, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %110 = cast(%v_param_9, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %111 = sum(%110, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %112 = reshape(%111, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %113 = nn.conv2d(%109, %v_param_9, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %114 = multiply(-128 /* ty=int32 */, %112) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %115 = subtract(%113, %114) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %116 = nn.bias_add(%115, %v_param_10, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %117 = cast(%116, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %118 = cast(%117, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %119 = multiply(%118, meta[relay.Constant][12] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %120 = add(%119, meta[relay.Constant][13] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %121 = right_shift(%120, meta[relay.Constant][14] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %122 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %123 = cast(%121, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %124 = add(%122, %123) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %125 = clip(%124, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %126 = cast(%125, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %127 = reshape(10 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %128 = expand_dims(%127, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %129 = cast(%126, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %130 = cast(%128, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %131 = subtract(%129, %130) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %132 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %133 = fixed_point_multiply(%131, multiplier=2009183692, shift=0) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %134 = add(%88, %89) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %135 = add(%132, %133) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %136 = add(%134, %135) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %137 = subtract(%136, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %138 = clip(%137, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %139 = cast(%138, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %140 = clip(%139, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %141 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %142 = expand_dims(%141, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %143 = cast(%140, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %144 = cast(%142, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %145 = subtract(%143, %144) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %146 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %147 = fixed_point_multiply(%145, multiplier=1349334673, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %148 = nn.pad(%140, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %149 = cast(%v_param_11, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %150 = sum(%149, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %151 = reshape(%150, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %152 = nn.conv2d(%148, %v_param_11, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %153 = multiply(-128 /* ty=int32 */, %151) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %154 = subtract(%152, %153) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %155 = nn.bias_add(%154, %v_param_12, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %156 = cast(%155, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %157 = cast(%156, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %158 = multiply(%157, meta[relay.Constant][15] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %159 = add(%158, meta[relay.Constant][16] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %160 = right_shift(%159, meta[relay.Constant][17] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %161 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %162 = cast(%160, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %163 = add(%161, %162) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %164 = clip(%163, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %165 = cast(%164, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %166 = clip(%165, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %167 = nn.pad(%166, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %168 = cast(%v_param_13, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %169 = sum(%168, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %170 = reshape(%169, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %171 = nn.conv2d(%167, %v_param_13, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %172 = multiply(-128 /* ty=int32 */, %170) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %173 = subtract(%171, %172) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %174 = nn.bias_add(%173, %v_param_14, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %175 = cast(%174, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %176 = cast(%175, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %177 = multiply(%176, meta[relay.Constant][18] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %178 = add(%177, meta[relay.Constant][19] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %179 = right_shift(%178, meta[relay.Constant][20] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %180 = cast(38 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %181 = cast(%179, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %182 = add(%180, %181) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %183 = clip(%182, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %184 = cast(%183, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %185 = reshape(38 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %186 = expand_dims(%185, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %187 = cast(%184, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %188 = cast(%186, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %189 = subtract(%187, %188) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %190 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %191 = fixed_point_multiply(%189, multiplier=1929168299, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %192 = add(%146, %147) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %193 = add(%190, %191) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %194 = add(%192, %193) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %195 = subtract(%194, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %196 = clip(%195, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %197 = cast(%196, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %198 = clip(%197, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %199 = nn.max_pool2d(%198, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %200 = nn.pad(%199, -128f /* ty=float32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 16]]) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %201 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %202 = expand_dims(%201, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %203 = cast(%200, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %204 = cast(%202, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %205 = subtract(%203, %204) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %206 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %207 = fixed_point_multiply(%205, multiplier=1514053960, shift=0) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %208 = nn.pad(%198, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 33, 33, 16), int8] */;
  %209 = cast(%v_param_15, dtype="int32") /* ty=Tensor[(3, 3, 16, 32), int32] */;
  %210 = sum(%209, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %211 = reshape(%210, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %212 = nn.conv2d(%208, %v_param_15, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %213 = multiply(-128 /* ty=int32 */, %211) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %214 = subtract(%212, %213) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %215 = nn.bias_add(%214, %v_param_16, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %216 = cast(%215, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %217 = cast(%216, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %218 = multiply(%217, meta[relay.Constant][21] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %219 = add(%218, meta[relay.Constant][22] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %220 = right_shift(%219, meta[relay.Constant][23] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %221 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %222 = cast(%220, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %223 = add(%221, %222) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %224 = clip(%223, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %225 = cast(%224, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %226 = clip(%225, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %227 = nn.pad(%226, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %228 = cast(%v_param_17, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %229 = sum(%228, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %230 = reshape(%229, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %231 = nn.conv2d(%227, %v_param_17, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %232 = multiply(-128 /* ty=int32 */, %230) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %233 = subtract(%231, %232) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %234 = nn.bias_add(%233, %v_param_18, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %235 = cast(%234, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %236 = cast(%235, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %237 = multiply(%236, meta[relay.Constant][24] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %238 = add(%237, meta[relay.Constant][25] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %239 = right_shift(%238, meta[relay.Constant][26] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %240 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %241 = cast(%239, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %242 = add(%240, %241) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %243 = clip(%242, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %244 = cast(%243, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %245 = reshape(5 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %246 = expand_dims(%245, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %247 = cast(%244, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %248 = cast(%246, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %249 = subtract(%247, %248) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %250 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %251 = fixed_point_multiply(%249, multiplier=1414035714, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %252 = add(%206, %207) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %253 = add(%250, %251) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %254 = add(%252, %253) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %255 = subtract(%254, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %256 = clip(%255, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %257 = cast(%256, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %258 = clip(%257, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %259 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %260 = expand_dims(%259, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %261 = cast(%258, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %262 = cast(%260, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %263 = subtract(%261, %262) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %264 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %265 = fixed_point_multiply(%263, multiplier=1147704770, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %266 = nn.pad(%258, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %267 = cast(%v_param_19, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %268 = sum(%267, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %269 = reshape(%268, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %270 = nn.conv2d(%266, %v_param_19, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %271 = multiply(-128 /* ty=int32 */, %269) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %272 = subtract(%270, %271) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %273 = nn.bias_add(%272, %v_param_20, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %274 = cast(%273, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %275 = cast(%274, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %276 = multiply(%275, meta[relay.Constant][27] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %277 = add(%276, meta[relay.Constant][28] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %278 = right_shift(%277, meta[relay.Constant][29] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %279 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %280 = cast(%278, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %281 = add(%279, %280) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %282 = clip(%281, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %283 = cast(%282, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %284 = clip(%283, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %285 = nn.pad(%284, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %286 = cast(%v_param_21, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %287 = sum(%286, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %288 = reshape(%287, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %289 = nn.conv2d(%285, %v_param_21, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %290 = multiply(-128 /* ty=int32 */, %288) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %291 = subtract(%289, %290) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %292 = nn.bias_add(%291, %v_param_22, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %293 = cast(%292, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %294 = cast(%293, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %295 = multiply(%294, meta[relay.Constant][30] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %296 = add(%295, meta[relay.Constant][31] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %297 = right_shift(%296, meta[relay.Constant][32] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %298 = cast(14 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %299 = cast(%297, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %300 = add(%298, %299) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %301 = clip(%300, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %302 = cast(%301, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %303 = reshape(14 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %304 = expand_dims(%303, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %305 = cast(%302, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %306 = cast(%304, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %307 = subtract(%305, %306) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %308 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %309 = fixed_point_multiply(%307, multiplier=2078426559, shift=0) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %310 = add(%264, %265) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %311 = add(%308, %309) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %312 = add(%310, %311) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %313 = subtract(%312, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %314 = clip(%313, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %315 = cast(%314, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %316 = clip(%315, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %317 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %318 = expand_dims(%317, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %319 = cast(%316, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %320 = cast(%318, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %321 = subtract(%319, %320) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %322 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %323 = fixed_point_multiply(%321, multiplier=1363168483, shift=0) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %324 = nn.pad(%316, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %325 = cast(%v_param_23, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %326 = sum(%325, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %327 = reshape(%326, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %328 = nn.conv2d(%324, %v_param_23, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %329 = multiply(-128 /* ty=int32 */, %327) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %330 = subtract(%328, %329) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %331 = nn.bias_add(%330, %v_param_24, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %332 = cast(%331, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %333 = cast(%332, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %334 = multiply(%333, meta[relay.Constant][33] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %335 = add(%334, meta[relay.Constant][34] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %336 = right_shift(%335, meta[relay.Constant][35] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %337 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %338 = cast(%336, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %339 = add(%337, %338) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %340 = clip(%339, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %341 = cast(%340, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %342 = clip(%341, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %343 = nn.pad(%342, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %344 = cast(%v_param_25, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %345 = sum(%344, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %346 = reshape(%345, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %347 = nn.conv2d(%343, %v_param_25, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %348 = multiply(-128 /* ty=int32 */, %346) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %349 = subtract(%347, %348) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %350 = nn.bias_add(%349, %v_param_26, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %351 = cast(%350, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %352 = cast(%351, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %353 = multiply(%352, meta[relay.Constant][36] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %354 = add(%353, meta[relay.Constant][37] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %355 = right_shift(%354, meta[relay.Constant][38] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %356 = cast(-59 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %357 = cast(%355, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %358 = add(%356, %357) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %359 = clip(%358, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %360 = cast(%359, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %361 = reshape(-59 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %362 = expand_dims(%361, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %363 = cast(%360, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %364 = cast(%362, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %365 = subtract(%363, %364) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %366 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %367 = fixed_point_multiply(%365, multiplier=1127882282, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %368 = add(%322, %323) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %369 = add(%366, %367) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %370 = add(%368, %369) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %371 = subtract(%370, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %372 = clip(%371, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %373 = cast(%372, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %374 = clip(%373, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %375 = nn.max_pool2d(%374, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 8, 8, 32), int8] */;
  %376 = nn.pad(%375, -128f /* ty=float32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 32]]) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %377 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %378 = expand_dims(%377, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %379 = cast(%376, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %380 = cast(%378, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %381 = subtract(%379, %380) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %382 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %383 = fixed_point_multiply(%381, multiplier=1325985887, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %384 = nn.pad(%374, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 17, 17, 32), int8] */;
  %385 = cast(%v_param_27, dtype="int32") /* ty=Tensor[(3, 3, 32, 64), int32] */;
  %386 = sum(%385, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %387 = reshape(%386, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %388 = nn.conv2d(%384, %v_param_27, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %389 = multiply(-128 /* ty=int32 */, %387) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %390 = subtract(%388, %389) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %391 = nn.bias_add(%390, %v_param_28, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %392 = cast(%391, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %393 = cast(%392, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %394 = multiply(%393, meta[relay.Constant][39] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %395 = add(%394, meta[relay.Constant][40] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %396 = right_shift(%395, meta[relay.Constant][41] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %397 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %398 = cast(%396, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %399 = add(%397, %398) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %400 = clip(%399, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %401 = cast(%400, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %402 = clip(%401, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %403 = nn.pad(%402, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %404 = cast(%v_param_29, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %405 = sum(%404, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %406 = reshape(%405, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %407 = nn.conv2d(%403, %v_param_29, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %408 = multiply(-128 /* ty=int32 */, %406) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %409 = subtract(%407, %408) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %410 = nn.bias_add(%409, %v_param_30, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %412 = cast(%411, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %413 = multiply(%412, meta[relay.Constant][42] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %414 = add(%413, meta[relay.Constant][43] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %415 = right_shift(%414, meta[relay.Constant][44] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %416 = cast(-22 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %417 = cast(%415, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %418 = add(%416, %417) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %419 = clip(%418, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %420 = cast(%419, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %421 = reshape(-22 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %422 = expand_dims(%421, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %423 = cast(%420, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %424 = cast(%422, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %425 = subtract(%423, %424) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %426 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %427 = fixed_point_multiply(%425, multiplier=1403594544, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %428 = add(%382, %383) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %429 = add(%426, %427) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %430 = add(%428, %429) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %431 = subtract(%430, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %432 = clip(%431, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %433 = cast(%432, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %434 = clip(%433, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %435 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %436 = expand_dims(%435, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %437 = cast(%434, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %438 = cast(%436, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %439 = subtract(%437, %438) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %440 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %441 = fixed_point_multiply(%439, multiplier=1160052048, shift=1) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %442 = nn.pad(%434, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %443 = cast(%v_param_31, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %444 = sum(%443, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %445 = reshape(%444, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %446 = nn.conv2d(%442, %v_param_31, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %447 = multiply(-128 /* ty=int32 */, %445) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %448 = subtract(%446, %447) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %449 = nn.bias_add(%448, %v_param_32, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %450 = cast(%449, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %451 = cast(%450, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %452 = multiply(%451, meta[relay.Constant][45] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %453 = add(%452, meta[relay.Constant][46] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %454 = right_shift(%453, meta[relay.Constant][47] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %455 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %456 = cast(%454, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %457 = add(%455, %456) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %458 = clip(%457, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %459 = cast(%458, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %460 = clip(%459, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %461 = nn.pad(%460, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %462 = cast(%v_param_33, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %463 = sum(%462, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %464 = reshape(%463, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %465 = nn.conv2d(%461, %v_param_33, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %466 = multiply(-128 /* ty=int32 */, %464) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %467 = subtract(%465, %466) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %468 = nn.bias_add(%467, %v_param_34, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %469 = cast(%468, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %470 = cast(%469, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %471 = multiply(%470, meta[relay.Constant][48] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %472 = add(%471, meta[relay.Constant][49] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %473 = right_shift(%472, meta[relay.Constant][50] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %474 = cast(20 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %475 = cast(%473, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %476 = add(%474, %475) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %477 = clip(%476, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %478 = cast(%477, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %479 = reshape(20 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %480 = expand_dims(%479, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %481 = cast(%478, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %482 = cast(%480, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %483 = subtract(%481, %482) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %484 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %485 = fixed_point_multiply(%483, multiplier=1571794412, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %486 = add(%440, %441) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %487 = add(%484, %485) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %488 = add(%486, %487) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %489 = subtract(%488, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %490 = clip(%489, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %491 = cast(%490, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %492 = clip(%491, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %493 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %494 = expand_dims(%493, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %495 = cast(%492, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %496 = cast(%494, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %497 = subtract(%495, %496) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %498 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %499 = fixed_point_multiply(%497, multiplier=1811369337, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %500 = nn.pad(%492, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %501 = cast(%v_param_35, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %502 = sum(%501, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %503 = reshape(%502, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %504 = nn.conv2d(%500, %v_param_35, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %505 = multiply(-128 /* ty=int32 */, %503) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %506 = subtract(%504, %505) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %507 = nn.bias_add(%506, %v_param_36, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %508 = cast(%507, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %509 = cast(%508, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %510 = multiply(%509, meta[relay.Constant][51] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %511 = add(%510, meta[relay.Constant][52] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %512 = right_shift(%511, meta[relay.Constant][53] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %513 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %514 = cast(%512, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %515 = add(%513, %514) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %516 = clip(%515, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %517 = cast(%516, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %518 = clip(%517, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %519 = nn.pad(%518, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %520 = cast(%v_param_37, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %521 = sum(%520, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %522 = reshape(%521, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %523 = nn.conv2d(%519, %v_param_37, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %524 = multiply(-128 /* ty=int32 */, %522) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %525 = subtract(%523, %524) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %526 = nn.bias_add(%525, %v_param_38, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %527 = cast(%526, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %528 = cast(%527, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %529 = multiply(%528, meta[relay.Constant][54] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %530 = add(%529, meta[relay.Constant][55] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %531 = right_shift(%530, meta[relay.Constant][56] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %532 = cast(-13 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %533 = cast(%531, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %534 = add(%532, %533) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %535 = clip(%534, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %536 = cast(%535, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %537 = reshape(-13 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %538 = expand_dims(%537, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %539 = cast(%536, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %540 = cast(%538, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %541 = subtract(%539, %540) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %542 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %543 = fixed_point_multiply(%541, multiplier=2097079130, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %544 = add(%498, %499) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %545 = add(%542, %543) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %546 = add(%544, %545) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %547 = subtract(%546, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %548 = clip(%547, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %549 = cast(%548, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %550 = clip(%549, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %551 = cast(%550, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %552 = mean(%551, axis=[1, 2]) /* ty=Tensor[(1, 64), int32] */;
  %553 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %554 = cast(%552, dtype="int32") /* ty=Tensor[(1, 64), int32] */;
  %555 = cast(%553, dtype="int32") /* ty=Tensor[(1), int32] */;
  %556 = subtract(%554, %555) /* ty=Tensor[(1, 64), int32] */;
  %557 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %558 = fixed_point_multiply(%556, multiplier=1169221628, shift=4) /* ty=Tensor[(1, 64), int32] */;
  %559 = add(%557, %558) /* ty=Tensor[(1, 64), int32] */;
  %560 = clip(%559, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 64), int32] */;
  %561 = cast(%560, dtype="int8") /* ty=Tensor[(1, 64), int8] */;
  %562 = reshape(%561, newshape=[-1, 64]) /* ty=Tensor[(1, 64), int8] */;
  %563 = cast(%v_param_39, dtype="int32") /* ty=Tensor[(10, 64), int32] */;
  %564 = sum(%563, axis=[1]) /* ty=Tensor[(10), int32] */;
  %565 = nn.dense(%562, %v_param_39, units=10, out_dtype="int32") /* ty=Tensor[(1, 10), int32] */;
  %566 = multiply(-128 /* ty=int32 */, %564) /* ty=Tensor[(10), int32] */;
  %567 = subtract(%565, %566) /* ty=Tensor[(1, 10), int32] */;
  %568 = nn.bias_add(%567, %v_param_40) /* ty=Tensor[(1, 10), int32] */;
  %569 = cast(%568, dtype="int32") /* ty=Tensor[(1, 10), int32] */;
  %570 = cast(-55 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %571 = fixed_point_multiply(%569, multiplier=1523793797, shift=-9) /* ty=Tensor[(1, 10), int32] */;
  %572 = add(%570, %571) /* ty=Tensor[(1, 10), int32] */;
  %573 = clip(%572, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 10), int32] */;
  %574 = cast(%573, dtype="int8") /* ty=Tensor[(1, 10), int8] */;
  %575 = cast(%574, dtype="int32") /* ty=Tensor[(1, 10), int32] */;
  %576 = subtract(%575, -55 /* ty=int32 */) /* ty=Tensor[(1, 10), int32] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(1, 10), float32] */;
  multiply(%577, 0.156748f /* ty=float32 */) /* ty=Tensor[(1, 10), float32] */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [
        3, 
        9, 
        13, 
        17, 
        21, 
        25, 
        29, 
        33, 
        37, 
        41, 
        45, 
        49, 
        53, 
        57, 
        61, 
        65, 
        69, 
        73, 
        77, 
        81, 
        85, 
        89, 
        93, 
        97, 
        101, 
        105, 
        109, 
        113, 
        117, 
        121, 
        125, 
        129, 
        133, 
        137, 
        141, 
        145, 
        149, 
        153, 
        157, 
        161, 
        165, 
        169, 
        173, 
        177, 
        181, 
        185, 
        189, 
        193, 
        197, 
        201, 
        205, 
        209, 
        213, 
        217, 
        221, 
        225, 
        229
      ]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "10", 
        "data": "1", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "11", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [12]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "14", 
        "data": "2", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "15", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [16]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "18", 
        "data": "3", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "19", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [20]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "22", 
        "data": "4", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "23", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [24]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "26", 
        "data": "5", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "27", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [28]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "30", 
        "data": "6", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "31", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [32]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "34", 
        "data": "7", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "35", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [36]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "38", 
        "data": "8", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "39", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [40]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "42", 
        "data": "9", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "43", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [44]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "46", 
        "data": "10", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "47", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [48]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "50", 
        "data": "11", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "51", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [52]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "54", 
        "data": "12", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "55", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [56]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "58", 
        "data": "13", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "59", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [60]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "62", 
        "data": "14", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "63", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [64]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "66", 
        "data": "15", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "67", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [68]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "70", 
        "data": "16", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "71", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [72]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "74", 
        "data": "17", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "75", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [76]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "78", 
        "data": "18", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "79", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [80]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "82", 
        "data": "19", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "83", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [84]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "86", 
        "data": "20", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "87", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [88]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "90", 
        "data": "21", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "91", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [92]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "94", 
        "data": "22", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "95", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [96]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "98", 
        "data": "23", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "99", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [100]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "102", 
        "data": "24", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "103", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [104]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "106", 
        "data": "25", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "107", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [108]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "110", 
        "data": "26", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "111", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [112]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "114", 
        "data": "27", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "115", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [116]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "118", 
        "data": "28", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "119", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [120]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "122", 
        "data": "29", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "123", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [124]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "126", 
        "data": "30", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "127", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [128]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "130", 
        "data": "31", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "131", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [132]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "134", 
        "data": "32", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "135", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [136]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "138", 
        "data": "33", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "139", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [140]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "142", 
        "data": "34", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "143", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [144]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "146", 
        "data": "35", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "147", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [148]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "150", 
        "data": "36", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "151", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [152]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "154", 
        "data": "37", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "155", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [156]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "158", 
        "data": "38", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "159", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [160]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "162", 
        "data": "39", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "163", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [164]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "166", 
        "data": "40", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "167", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [168]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "170", 
        "data": "41", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "171", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [172]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "174", 
        "data": "42", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "175", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [176]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "178", 
        "data": "43", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "179", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [180]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "182", 
        "data": "44", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "183", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [184]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "186", 
        "data": "45", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "187", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [188]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "190", 
        "data": "46", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "191", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [192]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "194", 
        "data": "47", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "195", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [196]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "198", 
        "data": "48", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "199", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [200]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "202", 
        "data": "49", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "203", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [204]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "206", 
        "data": "50", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "207", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [208]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "210", 
        "data": "51", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "211", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [212]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "214", 
        "data": "52", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "215", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [216]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "218", 
        "data": "53", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "219", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [220]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "222", 
        "data": "54", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "223", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [224]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "226", 
        "data": "55", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "227", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [228]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "230", 
        "data": "56", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "231", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [232]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }
  ], 
  "b64ndarrays": [
    "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", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKgAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAqAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAqAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAfNoWTQAAAADjXbttAAAAAIX5hkIAAAAAX6KEeQAAAACfhp1dAAAAAJhFLl0AAAAAKgo8SgAAAAATiZt3AAAAAO7Eqn8AAAAA9rkoQwAAAABM8NR1AAAAALmMc3sAAAAAySQuQQAAAAD5ok9gAAAAAOCkHF0AAAAAAENsfQAAAACbdv1EAAAAAIPWR1wAAAAAEiMvVAAAAAC+bcdEAAAAADbFYHQAAAAAj0IOZAAAAACEVYtFAAAAAFjuUlcAAAAAzSlyVQAAAAAShld1AAAAAAQnE3EAAAAA9X6oQgAAAACvDcJ3AAAAAKFP1nkAAAAA3fx+cgAAAACRqh5HAAAAANrkf0UAAAAAXvYORQAAAABGf9VLAAAAADhZi0IAAAAABp+VTgAAAACtSIRaAAAAAJ8gn0AAAAAA1qUxaAAAAAB1h191AAAAADXqpXsAAAAAiC2hdwAAAACn5PZuAAAAAHI1UlYAAAAAXg2adAAAAAC9dGhcAAAAAEy343QAAAAAn6iCTAAAAAAK59lIAAAAAEa49EAAAAAAFsUKagAAAACvFEl+AAAAAFU4yGUAAAAA1JsBSAAAAAAoZHt8AAAAAPzEFkoAAAAAXvkhRwAAAACpVaV6AAAAANMycmgAAAAA3gxabQAAAACEaXhEAAAAAHrgi2EAAAAAfH3fRgAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAACAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAIAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAABAAAAAAAAAACAAAAAAAAAAIAAAAAAAAABAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAABAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAJgAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJgAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJgAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAWDF3dAAAAADbgENIAAAAAPJ+gUgAAAAAc2SaSwAAAACiWiRNAAAAAHNH5E4AAAAA515gRAAAAADcwRhWAAAAABnTkF0AAAAA49fUSgAAAAAl9SVRAAAAAK7A2VAAAAAAOW1PVQAAAAANT2dWAAAAALL4N08AAAAAqLrhQgAAAACxuE5dAAAAAKMC6E0AAAAAuJ3XXgAAAABTFetUAAAAAHeDzXcAAAAA9YSJWgAAAAAbQXdxAAAAAFjC33wAAAAAgh5zSQAAAAAMlxpXAAAAAEejsUgAAAAALq+HTAAAAAA1aLVoAAAAAMsJcH8AAAAARmEeVAAAAADDRK10AAAAALYskUcAAAAA4adnRAAAAAD1sbNsAAAAAAMaRkUAAAAAZ/hfeQAAAADQx31PAAAAAH9ecEIAAAAAtkIhbgAAAACcx91tAAAAAPtpK2gAAAAAlX1HeQAAAABbkFxVAAAAAMN+BEEAAAAADkgPUAAAAAAxfFt/AAAAABf0r1gAAAAAI8xgWgAAAACr6HpMAAAAADwbd0IAAAAAY7kWdQAAAAAEftRAAAAAAFv/MngAAAAAKkOSRAAAAAAiDhFCAAAAAKG0w2UAAAAAyh0GSgAAAABi/014AAAAAEenjEQAAAAAE0fMRgAAAAA7MOR3AAAAAFNZokcAAAAAeG3lYQAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAIAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAIAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACoAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAqAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAqAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAACicpZQAAAABQVCJWAAAAAPpDFl8AAAAA9LltYQAAAADVlIJXAAAAAKZqlE8AAAAAvkD9UgAAAAB3ul1JAAAAAGFuJUcAAAAAZtP0bwAAAACg3/psAAAAAMJCKUQAAAAAaJeTbwAAAAD8gs1hAAAAAA7takEAAAAAblMCbQAAAABafihDAAAAAOEPm0AAAAAA0e6WYQAAAABIJDxhAAAAAPx8G28AAAAAzclaYAAAAADxlFB5AAAAAAdODHUAAAAACrfsTwAAAADuqPFjAAAAAOaXvmwAAAAARFMwTQAAAAAg/g17AAAAAF/ozWkAAAAArH1SeQAAAABq9ttgAAAAACEtVXkAAAAAgOtuTQAAAAARqSpCAAAAAPYix2MAAAAAqedSeQAAAADJtWtWAAAAAIVzuEEAAAAAcdHOSAAAAADNaOdeAAAAAEZStFoAAAAAXOcsSgAAAAD89QRaAAAAAPkQeksAAAAAs/D0TQAAAACnKPFIAAAAAB14yEMAAAAANTosQgAAAACMgZluAAAAAFzIS0cAAAAAo2XPaQAAAAD9dqxhAAAAACG6V1sAAAAApRBJYgAAAAA4CANpAAAAAOVoF1wAAAAAzTSATgAAAABqAORmAAAAAMx8NlgAAAAATJ1bcQAAAACglOl9AAAAAG0fo2kAAAAAVXu0RQAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAIAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJgAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAKAAAAAAAAAAmAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAoAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAoAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAf/lCaQAAAAC4HPZfAAAAAOQxLmkAAAAABJ7dSAAAAAD6AyJ2AAAAAIzdUkUAAAAAdFKaUwAAAAB3B/duAAAAAHo2AWAAAAAAhAg0egAAAAD9GQtnAAAAAEOYUnEAAAAAAK7mQQAAAAA5TzpEAAAAAH6f81gAAAAA/AKTTQAAAADhQ4lvAAAAANFExngAAAAAMGSHbwAAAAB3jSBqAAAAANteD0cAAAAAnOpOYwAAAABBh1dBAAAAAKpVu04AAAAADdwUeQAAAAAExp1vAAAAAFiBon4AAAAAq580aAAAAADikTZFAAAAAEGBqkYAAAAAQ8SQegAAAACtEO5TAAAAAMj5ynoAAAAA7eccQgAAAACmShZ0AAAAALbfvWUAAAAAwefHXQAAAABBnpBvAAAAAIVZTVUAAAAARMPIQwAAAAAL6i9mAAAAAMsDjEUAAAAAB1C+RQAAAACrQHhNAAAAAHVAyHUAAAAA3FZ+fAAAAACAEK9lAAAAAC6iMHsAAAAAH/gJYAAAAAAd1UtJAAAAAE1lqGgAAAAAIoCAbQAAAAAU4f5mAAAAAFjtTHgAAAAAg3x1WwAAAAA6MkBGAAAAAId3NkcAAAAAdRv3QgAAAAAT7ml0AAAAACRR00QAAAAAK6GdZwAAAAA1uMVyAAAAANdiOF8AAAAAtODmVAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAA="
  ], 
  "attrs": {"tvm_version": "0.9.dev0"}
}
