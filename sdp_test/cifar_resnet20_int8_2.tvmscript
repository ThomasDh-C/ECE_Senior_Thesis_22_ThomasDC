#[version = "0.0.5"]
def @main(%serving_default_input_1:0: Tensor[(1, 32, 32, 3), int8], %v_param_1: Tensor[(3, 3, 3, 16), int8], %v_param_2: Tensor[(16), int32], %v_param_3: Tensor[(3, 3, 16, 16), int8], %v_param_4: Tensor[(16), int32], %v_param_5: Tensor[(3, 3, 16, 16), int8], %v_param_6: Tensor[(16), int32], %v_param_7: Tensor[(3, 3, 16, 16), int8], %v_param_8: Tensor[(16), int32], %v_param_9: Tensor[(3, 3, 16, 16), int8], %v_param_10: Tensor[(16), int32], %v_param_11: Tensor[(3, 3, 16, 16), int8], %v_param_12: Tensor[(16), int32], %v_param_13: Tensor[(3, 3, 16, 16), int8], %v_param_14: Tensor[(16), int32], %v_param_15: Tensor[(3, 3, 16, 32), int8], %v_param_16: Tensor[(32), int32], %v_param_17: Tensor[(3, 3, 32, 32), int8], %v_param_18: Tensor[(32), int32], %v_param_19: Tensor[(3, 3, 32, 32), int8], %v_param_20: Tensor[(32), int32], %v_param_21: Tensor[(3, 3, 32, 32), int8], %v_param_22: Tensor[(32), int32], %v_param_23: Tensor[(3, 3, 32, 32), int8], %v_param_24: Tensor[(32), int32], %v_param_25: Tensor[(3, 3, 32, 32), int8], %v_param_26: Tensor[(32), int32], %v_param_27: Tensor[(3, 3, 32, 64), int8], %v_param_28: Tensor[(64), int32], %v_param_29: Tensor[(3, 3, 64, 64), int8], %v_param_30: Tensor[(64), int32], %v_param_31: Tensor[(3, 3, 64, 64), int8], %v_param_32: Tensor[(64), int32], %v_param_33: Tensor[(3, 3, 64, 64), int8], %v_param_34: Tensor[(64), int32], %v_param_35: Tensor[(3, 3, 64, 64), int8], %v_param_36: Tensor[(64), int32], %v_param_37: Tensor[(3, 3, 64, 64), int8], %v_param_38: Tensor[(64), int32], %v_param_39: Tensor[(10, 64), int8], %v_param_40: Tensor[(10), int32]) -> Tensor[(1, 10), int8] {
  %0 = nn.pad(%serving_default_input_1:0, -8 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 3), int8] */;
  %1 = cast(%v_param_1, dtype="int32") /* ty=Tensor[(3, 3, 3, 16), int32] */;
  %2 = sum(%1, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %3 = reshape(%2, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %4 = nn.conv2d(%0, %v_param_1, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %5 = multiply(-8 /* ty=int32 */, %3) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %6 = subtract(%4, %5) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %7 = nn.bias_add(%6, %v_param_2, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %8 = cast(%7, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %9 = cast(%8, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %10 = multiply(%9, meta[relay.Constant][0] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %11 = add(%10, meta[relay.Constant][1] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %12 = right_shift(%11, meta[relay.Constant][2] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %13 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %14 = cast(%12, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %15 = add(%13, %14) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %16 = clip(%15, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %17 = cast(%16, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %18 = clip(%17, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %19 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %20 = expand_dims(%19, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %21 = cast(%18, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %22 = cast(%20, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %23 = subtract(%21, %22) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %24 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %25 = fixed_point_multiply(%23, multiplier=1466112045, shift=0) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %26 = nn.pad(%18, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %27 = cast(%v_param_3, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %28 = sum(%27, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %29 = reshape(%28, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %30 = nn.conv2d(%26, %v_param_3, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %31 = multiply(-128 /* ty=int32 */, %29) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %32 = subtract(%30, %31) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %33 = nn.bias_add(%32, %v_param_4, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %34 = cast(%33, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %35 = cast(%34, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %36 = multiply(%35, meta[relay.Constant][3] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %37 = add(%36, meta[relay.Constant][4] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %38 = right_shift(%37, meta[relay.Constant][5] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %39 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %40 = cast(%38, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %41 = add(%39, %40) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %42 = clip(%41, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %43 = cast(%42, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %44 = clip(%43, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %45 = nn.pad(%44, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %46 = cast(%v_param_5, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %47 = sum(%46, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %48 = reshape(%47, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %49 = nn.conv2d(%45, %v_param_5, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %50 = multiply(-128 /* ty=int32 */, %48) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %51 = subtract(%49, %50) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %52 = nn.bias_add(%51, %v_param_6, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %53 = cast(%52, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %54 = cast(%53, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %55 = multiply(%54, meta[relay.Constant][6] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %56 = add(%55, meta[relay.Constant][7] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %57 = right_shift(%56, meta[relay.Constant][8] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %58 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %59 = cast(%57, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %60 = add(%58, %59) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %61 = clip(%60, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %62 = cast(%61, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %63 = reshape(9 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %64 = expand_dims(%63, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %65 = cast(%62, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %66 = cast(%64, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %67 = subtract(%65, %66) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %68 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %69 = fixed_point_multiply(%67, multiplier=1821915150, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %70 = add(%24, %25) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %71 = add(%68, %69) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %72 = add(%70, %71) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %73 = subtract(%72, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %74 = clip(%73, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %75 = cast(%74, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %76 = clip(%75, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %77 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %78 = expand_dims(%77, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %79 = cast(%76, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %80 = cast(%78, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %81 = subtract(%79, %80) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %82 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %83 = fixed_point_multiply(%81, multiplier=2068850059, shift=0) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %84 = nn.pad(%76, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %85 = cast(%v_param_7, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %86 = sum(%85, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %87 = reshape(%86, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %88 = nn.conv2d(%84, %v_param_7, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %89 = multiply(-128 /* ty=int32 */, %87) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %90 = subtract(%88, %89) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %91 = nn.bias_add(%90, %v_param_8, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %92 = cast(%91, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %93 = cast(%92, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %94 = multiply(%93, meta[relay.Constant][9] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %95 = add(%94, meta[relay.Constant][10] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %96 = right_shift(%95, meta[relay.Constant][11] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %97 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %98 = cast(%96, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %99 = add(%97, %98) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %100 = clip(%99, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %101 = cast(%100, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %102 = clip(%101, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %103 = nn.pad(%102, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %104 = cast(%v_param_9, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %105 = sum(%104, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %106 = reshape(%105, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %107 = nn.conv2d(%103, %v_param_9, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %108 = multiply(-128 /* ty=int32 */, %106) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %109 = subtract(%107, %108) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %110 = nn.bias_add(%109, %v_param_10, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %111 = cast(%110, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %112 = cast(%111, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %113 = multiply(%112, meta[relay.Constant][12] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %114 = add(%113, meta[relay.Constant][13] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %115 = right_shift(%114, meta[relay.Constant][14] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %116 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %117 = cast(%115, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %118 = add(%116, %117) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %119 = clip(%118, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %120 = cast(%119, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %121 = reshape(-7 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %122 = expand_dims(%121, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %123 = cast(%120, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %124 = cast(%122, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %125 = subtract(%123, %124) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %126 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %127 = fixed_point_multiply(%125, multiplier=1157116979, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %128 = add(%82, %83) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %129 = add(%126, %127) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %130 = add(%128, %129) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %131 = subtract(%130, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %132 = clip(%131, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %133 = cast(%132, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %134 = clip(%133, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %135 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %136 = expand_dims(%135, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %137 = cast(%134, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %138 = cast(%136, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %139 = subtract(%137, %138) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %140 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %141 = fixed_point_multiply(%139, multiplier=1271654706, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %142 = nn.pad(%134, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %143 = cast(%v_param_11, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %144 = sum(%143, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %145 = reshape(%144, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %146 = nn.conv2d(%142, %v_param_11, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %147 = multiply(-128 /* ty=int32 */, %145) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %148 = subtract(%146, %147) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %149 = nn.bias_add(%148, %v_param_12, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %150 = cast(%149, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %151 = cast(%150, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %152 = multiply(%151, meta[relay.Constant][15] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %153 = add(%152, meta[relay.Constant][16] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %154 = right_shift(%153, meta[relay.Constant][17] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %155 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %156 = cast(%154, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %157 = add(%155, %156) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %158 = clip(%157, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %159 = cast(%158, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %160 = clip(%159, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %161 = nn.pad(%160, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 34, 34, 16), int8] */;
  %162 = cast(%v_param_13, dtype="int32") /* ty=Tensor[(3, 3, 16, 16), int32] */;
  %163 = sum(%162, axis=[0, 1, 2]) /* ty=Tensor[(16), int32] */;
  %164 = reshape(%163, newshape=[1, 1, 1, 16]) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %165 = nn.conv2d(%161, %v_param_13, padding=[0, 0, 0, 0], channels=16, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %166 = multiply(-128 /* ty=int32 */, %164) /* ty=Tensor[(1, 1, 1, 16), int32] */;
  %167 = subtract(%165, %166) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %168 = nn.bias_add(%167, %v_param_14, axis=3) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %169 = cast(%168, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %170 = cast(%169, dtype="int64") /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %171 = multiply(%170, meta[relay.Constant][18] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %172 = add(%171, meta[relay.Constant][19] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %173 = right_shift(%172, meta[relay.Constant][20] /* ty=Tensor[(16), int64] */) /* ty=Tensor[(1, 32, 32, 16), int64] */;
  %174 = cast(32 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %175 = cast(%173, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %176 = add(%174, %175) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %177 = clip(%176, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %178 = cast(%177, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %179 = reshape(32 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %180 = expand_dims(%179, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %181 = cast(%178, dtype="int32") /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %182 = cast(%180, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %183 = subtract(%181, %182) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %184 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %185 = fixed_point_multiply(%183, multiplier=1754757229, shift=1) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %186 = add(%140, %141) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %187 = add(%184, %185) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %188 = add(%186, %187) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %189 = subtract(%188, -128 /* ty=int32 */) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %190 = clip(%189, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int32] */;
  %191 = cast(%190, dtype="int8") /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %192 = clip(%191, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 32, 32, 16), int8] */;
  %193 = nn.max_pool2d(%192, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 16, 16, 16), int8] */;
  %194 = nn.pad(%193, -128f /* ty=float32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 16]]) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %195 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %196 = expand_dims(%195, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %197 = cast(%194, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %198 = cast(%196, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %199 = subtract(%197, %198) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %200 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %201 = fixed_point_multiply(%199, multiplier=1690598599, shift=0) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %202 = nn.pad(%192, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 33, 33, 16), int8] */;
  %203 = cast(%v_param_15, dtype="int32") /* ty=Tensor[(3, 3, 16, 32), int32] */;
  %204 = sum(%203, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %205 = reshape(%204, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %206 = nn.conv2d(%202, %v_param_15, strides=[2, 2], padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %207 = multiply(-128 /* ty=int32 */, %205) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %208 = subtract(%206, %207) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %209 = nn.bias_add(%208, %v_param_16, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %210 = cast(%209, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %211 = cast(%210, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %212 = multiply(%211, meta[relay.Constant][21] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %213 = add(%212, meta[relay.Constant][22] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %214 = right_shift(%213, meta[relay.Constant][23] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %215 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %216 = cast(%214, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %217 = add(%215, %216) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %218 = clip(%217, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %219 = cast(%218, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %220 = clip(%219, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %221 = nn.pad(%220, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %222 = cast(%v_param_17, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %223 = sum(%222, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %224 = reshape(%223, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %225 = nn.conv2d(%221, %v_param_17, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %226 = multiply(-128 /* ty=int32 */, %224) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %227 = subtract(%225, %226) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %228 = nn.bias_add(%227, %v_param_18, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %229 = cast(%228, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %230 = cast(%229, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %231 = multiply(%230, meta[relay.Constant][24] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %232 = add(%231, meta[relay.Constant][25] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %233 = right_shift(%232, meta[relay.Constant][26] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %234 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %235 = cast(%233, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %236 = add(%234, %235) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %237 = clip(%236, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %238 = cast(%237, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %239 = reshape(-5 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %240 = expand_dims(%239, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %241 = cast(%238, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %242 = cast(%240, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %243 = subtract(%241, %242) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %244 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %245 = fixed_point_multiply(%243, multiplier=1465568002, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %246 = add(%200, %201) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %247 = add(%244, %245) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %248 = add(%246, %247) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %249 = subtract(%248, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %250 = clip(%249, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %251 = cast(%250, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %252 = clip(%251, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %253 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %254 = expand_dims(%253, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %255 = cast(%252, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %256 = cast(%254, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %257 = subtract(%255, %256) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %258 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %259 = fixed_point_multiply(%257, multiplier=1192572329, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %260 = nn.pad(%252, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %261 = cast(%v_param_19, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %262 = sum(%261, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %263 = reshape(%262, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %264 = nn.conv2d(%260, %v_param_19, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %265 = multiply(-128 /* ty=int32 */, %263) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %266 = subtract(%264, %265) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %267 = nn.bias_add(%266, %v_param_20, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %268 = cast(%267, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %269 = cast(%268, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %270 = multiply(%269, meta[relay.Constant][27] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %271 = add(%270, meta[relay.Constant][28] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %272 = right_shift(%271, meta[relay.Constant][29] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %273 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %274 = cast(%272, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %275 = add(%273, %274) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %276 = clip(%275, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %277 = cast(%276, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %278 = clip(%277, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %279 = nn.pad(%278, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %280 = cast(%v_param_21, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %281 = sum(%280, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %282 = reshape(%281, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %283 = nn.conv2d(%279, %v_param_21, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %284 = multiply(-128 /* ty=int32 */, %282) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %285 = subtract(%283, %284) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %286 = nn.bias_add(%285, %v_param_22, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %287 = cast(%286, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %288 = cast(%287, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %289 = multiply(%288, meta[relay.Constant][30] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %290 = add(%289, meta[relay.Constant][31] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %291 = right_shift(%290, meta[relay.Constant][32] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %292 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %293 = cast(%291, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %294 = add(%292, %293) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %295 = clip(%294, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %296 = cast(%295, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %297 = reshape(3 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %298 = expand_dims(%297, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %299 = cast(%296, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %300 = cast(%298, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %301 = subtract(%299, %300) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %302 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %303 = fixed_point_multiply(%301, multiplier=1412996459, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %304 = add(%258, %259) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %305 = add(%302, %303) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %306 = add(%304, %305) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %307 = subtract(%306, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %308 = clip(%307, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %309 = cast(%308, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %310 = clip(%309, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %311 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %312 = expand_dims(%311, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %313 = cast(%310, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %314 = cast(%312, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %315 = subtract(%313, %314) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %316 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %317 = fixed_point_multiply(%315, multiplier=1478149503, shift=0) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %318 = nn.pad(%310, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %319 = cast(%v_param_23, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %320 = sum(%319, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %321 = reshape(%320, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %322 = nn.conv2d(%318, %v_param_23, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %323 = multiply(-128 /* ty=int32 */, %321) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %324 = subtract(%322, %323) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %325 = nn.bias_add(%324, %v_param_24, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %326 = cast(%325, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %327 = cast(%326, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %328 = multiply(%327, meta[relay.Constant][33] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %329 = add(%328, meta[relay.Constant][34] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %330 = right_shift(%329, meta[relay.Constant][35] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %331 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %332 = cast(%330, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %333 = add(%331, %332) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %334 = clip(%333, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %335 = cast(%334, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %336 = clip(%335, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %337 = nn.pad(%336, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 18, 18, 32), int8] */;
  %338 = cast(%v_param_25, dtype="int32") /* ty=Tensor[(3, 3, 32, 32), int32] */;
  %339 = sum(%338, axis=[0, 1, 2]) /* ty=Tensor[(32), int32] */;
  %340 = reshape(%339, newshape=[1, 1, 1, 32]) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %341 = nn.conv2d(%337, %v_param_25, padding=[0, 0, 0, 0], channels=32, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %342 = multiply(-128 /* ty=int32 */, %340) /* ty=Tensor[(1, 1, 1, 32), int32] */;
  %343 = subtract(%341, %342) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %344 = nn.bias_add(%343, %v_param_26, axis=3) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %345 = cast(%344, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %346 = cast(%345, dtype="int64") /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %347 = multiply(%346, meta[relay.Constant][36] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %348 = add(%347, meta[relay.Constant][37] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %349 = right_shift(%348, meta[relay.Constant][38] /* ty=Tensor[(32), int64] */) /* ty=Tensor[(1, 16, 16, 32), int64] */;
  %350 = cast(-45 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %351 = cast(%349, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %352 = add(%350, %351) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %353 = clip(%352, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %354 = cast(%353, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %355 = reshape(-45 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %356 = expand_dims(%355, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %357 = cast(%354, dtype="int32") /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %358 = cast(%356, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %359 = subtract(%357, %358) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %360 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %361 = fixed_point_multiply(%359, multiplier=1142816676, shift=1) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %362 = add(%316, %317) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %363 = add(%360, %361) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %364 = add(%362, %363) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %365 = subtract(%364, -128 /* ty=int32 */) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %366 = clip(%365, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int32] */;
  %367 = cast(%366, dtype="int8") /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %368 = clip(%367, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 16, 16, 32), int8] */;
  %369 = nn.max_pool2d(%368, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 8, 8, 32), int8] */;
  %370 = nn.pad(%369, -128f /* ty=float32 */, pad_width=[[0, 0], [0, 0], [0, 0], [0, 32]]) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %371 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %372 = expand_dims(%371, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %373 = cast(%370, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %374 = cast(%372, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %375 = subtract(%373, %374) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %376 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %377 = fixed_point_multiply(%375, multiplier=1764809831, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %378 = nn.pad(%368, -128 /* ty=int32 */, pad_width=[[0, 0], [0, 1], [0, 1], [0, 0]]) /* ty=Tensor[(1, 17, 17, 32), int8] */;
  %379 = cast(%v_param_27, dtype="int32") /* ty=Tensor[(3, 3, 32, 64), int32] */;
  %380 = sum(%379, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %381 = reshape(%380, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %382 = nn.conv2d(%378, %v_param_27, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %383 = multiply(-128 /* ty=int32 */, %381) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %384 = subtract(%382, %383) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %385 = nn.bias_add(%384, %v_param_28, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %386 = cast(%385, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %387 = cast(%386, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %388 = multiply(%387, meta[relay.Constant][39] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %389 = add(%388, meta[relay.Constant][40] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %390 = right_shift(%389, meta[relay.Constant][41] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %391 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %392 = cast(%390, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %393 = add(%391, %392) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %394 = clip(%393, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %395 = cast(%394, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %396 = clip(%395, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %397 = nn.pad(%396, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %398 = cast(%v_param_29, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %399 = sum(%398, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %400 = reshape(%399, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %401 = nn.conv2d(%397, %v_param_29, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %402 = multiply(-128 /* ty=int32 */, %400) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %403 = subtract(%401, %402) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %404 = nn.bias_add(%403, %v_param_30, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %405 = cast(%404, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %406 = cast(%405, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %407 = multiply(%406, meta[relay.Constant][42] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %408 = add(%407, meta[relay.Constant][43] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %409 = right_shift(%408, meta[relay.Constant][44] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %410 = cast(-13 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %411 = cast(%409, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %412 = add(%410, %411) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %413 = clip(%412, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %414 = cast(%413, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %415 = reshape(-13 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %416 = expand_dims(%415, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %417 = cast(%414, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %418 = cast(%416, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %419 = subtract(%417, %418) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %420 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %421 = fixed_point_multiply(%419, multiplier=1142887569, shift=1) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %422 = add(%376, %377) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %423 = add(%420, %421) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %424 = add(%422, %423) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %425 = subtract(%424, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %426 = clip(%425, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %427 = cast(%426, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %428 = clip(%427, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %429 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %430 = expand_dims(%429, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %431 = cast(%428, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %432 = cast(%430, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %433 = subtract(%431, %432) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %434 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %435 = fixed_point_multiply(%433, multiplier=1074619992, shift=1) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %436 = nn.pad(%428, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %437 = cast(%v_param_31, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %438 = sum(%437, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %439 = reshape(%438, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %440 = nn.conv2d(%436, %v_param_31, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %441 = multiply(-128 /* ty=int32 */, %439) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %442 = subtract(%440, %441) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %443 = nn.bias_add(%442, %v_param_32, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %444 = cast(%443, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %445 = cast(%444, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %446 = multiply(%445, meta[relay.Constant][45] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %447 = add(%446, meta[relay.Constant][46] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %448 = right_shift(%447, meta[relay.Constant][47] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %449 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %450 = cast(%448, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %451 = add(%449, %450) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %452 = clip(%451, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %453 = cast(%452, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %454 = clip(%453, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %455 = nn.pad(%454, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %456 = cast(%v_param_33, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %457 = sum(%456, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %458 = reshape(%457, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %459 = nn.conv2d(%455, %v_param_33, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %460 = multiply(-128 /* ty=int32 */, %458) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %461 = subtract(%459, %460) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %462 = nn.bias_add(%461, %v_param_34, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %463 = cast(%462, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %464 = cast(%463, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %465 = multiply(%464, meta[relay.Constant][48] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %466 = add(%465, meta[relay.Constant][49] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %467 = right_shift(%466, meta[relay.Constant][50] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %468 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %469 = cast(%467, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %470 = add(%468, %469) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %471 = clip(%470, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %472 = cast(%471, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %473 = reshape(5 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %474 = expand_dims(%473, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %475 = cast(%472, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %476 = cast(%474, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %477 = subtract(%475, %476) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %478 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %479 = fixed_point_multiply(%477, multiplier=1110480567, shift=1) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %480 = add(%434, %435) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %481 = add(%478, %479) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %482 = add(%480, %481) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %483 = subtract(%482, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %484 = clip(%483, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %485 = cast(%484, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %486 = clip(%485, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %487 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %488 = expand_dims(%487, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %489 = cast(%486, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %490 = cast(%488, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %491 = subtract(%489, %490) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %492 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %493 = fixed_point_multiply(%491, multiplier=1509669425, shift=0) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %494 = nn.pad(%486, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %495 = cast(%v_param_35, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %496 = sum(%495, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %497 = reshape(%496, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %498 = nn.conv2d(%494, %v_param_35, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %499 = multiply(-128 /* ty=int32 */, %497) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %500 = subtract(%498, %499) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %501 = nn.bias_add(%500, %v_param_36, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %502 = cast(%501, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %503 = cast(%502, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %504 = multiply(%503, meta[relay.Constant][51] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %505 = add(%504, meta[relay.Constant][52] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %506 = right_shift(%505, meta[relay.Constant][53] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %507 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %508 = cast(%506, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %509 = add(%507, %508) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %510 = clip(%509, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %511 = cast(%510, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %512 = clip(%511, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %513 = nn.pad(%512, -128 /* ty=int32 */, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]) /* ty=Tensor[(1, 10, 10, 64), int8] */;
  %514 = cast(%v_param_37, dtype="int32") /* ty=Tensor[(3, 3, 64, 64), int32] */;
  %515 = sum(%514, axis=[0, 1, 2]) /* ty=Tensor[(64), int32] */;
  %516 = reshape(%515, newshape=[1, 1, 1, 64]) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %517 = nn.conv2d(%513, %v_param_37, padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %518 = multiply(-128 /* ty=int32 */, %516) /* ty=Tensor[(1, 1, 1, 64), int32] */;
  %519 = subtract(%517, %518) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %520 = nn.bias_add(%519, %v_param_38, axis=3) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %521 = cast(%520, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %522 = cast(%521, dtype="int64") /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %523 = multiply(%522, meta[relay.Constant][54] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %524 = add(%523, meta[relay.Constant][55] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %525 = right_shift(%524, meta[relay.Constant][56] /* ty=Tensor[(64), int64] */) /* ty=Tensor[(1, 8, 8, 64), int64] */;
  %526 = cast(-25 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %527 = cast(%525, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %528 = add(%526, %527) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %529 = clip(%528, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %530 = cast(%529, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %531 = reshape(-25 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %532 = expand_dims(%531, axis=1, num_newaxis=3) /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %533 = cast(%530, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %534 = cast(%532, dtype="int32") /* ty=Tensor[(1, 1, 1, 1), int32] */;
  %535 = subtract(%533, %534) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %536 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %537 = fixed_point_multiply(%535, multiplier=1159606797, shift=1) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %538 = add(%492, %493) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %539 = add(%536, %537) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %540 = add(%538, %539) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %541 = subtract(%540, -128 /* ty=int32 */) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %542 = clip(%541, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %543 = cast(%542, dtype="int8") /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %544 = clip(%543, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 8, 8, 64), int8] */;
  %545 = cast(%544, dtype="int32") /* ty=Tensor[(1, 8, 8, 64), int32] */;
  %546 = mean(%545, axis=[1, 2]) /* ty=Tensor[(1, 64), int32] */;
  %547 = reshape(-128 /* ty=int32 */, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %548 = cast(%546, dtype="int32") /* ty=Tensor[(1, 64), int32] */;
  %549 = cast(%547, dtype="int32") /* ty=Tensor[(1), int32] */;
  %550 = subtract(%548, %549) /* ty=Tensor[(1, 64), int32] */;
  %551 = cast(-128 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %552 = fixed_point_multiply(%550, multiplier=1504183998, shift=3) /* ty=Tensor[(1, 64), int32] */;
  %553 = add(%551, %552) /* ty=Tensor[(1, 64), int32] */;
  %554 = clip(%553, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 64), int32] */;
  %555 = cast(%554, dtype="int8") /* ty=Tensor[(1, 64), int8] */;
  %556 = reshape(%555, newshape=[-1, 64]) /* ty=Tensor[(1, 64), int8] */;
  %557 = cast(%v_param_39, dtype="int32") /* ty=Tensor[(10, 64), int32] */;
  %558 = sum(%557, axis=[1]) /* ty=Tensor[(10), int32] */;
  %559 = nn.dense(%556, %v_param_39, units=10, out_dtype="int32") /* ty=Tensor[(1, 10), int32] */;
  %560 = multiply(-128 /* ty=int32 */, %558) /* ty=Tensor[(10), int32] */;
  %561 = subtract(%559, %560) /* ty=Tensor[(1, 10), int32] */;
  %562 = nn.bias_add(%561, %v_param_40) /* ty=Tensor[(1, 10), int32] */;
  %563 = cast(%562, dtype="int32") /* ty=Tensor[(1, 10), int32] */;
  %564 = cast(-57 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %565 = fixed_point_multiply(%563, multiplier=1871226094, shift=-9) /* ty=Tensor[(1, 10), int32] */;
  %566 = add(%564, %565) /* ty=Tensor[(1, 10), int32] */;
  %567 = clip(%566, a_min=-128f, a_max=127f) /* ty=Tensor[(1, 10), int32] */;
  cast(%567, dtype="int8") /* ty=Tensor[(1, 10), int8] */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [
        3, 
        9, 
        13, 
        17, 
        21, 
        25, 
        29, 
        33, 
        37, 
        41, 
        45, 
        49, 
        53, 
        57, 
        61, 
        65, 
        69, 
        73, 
        77, 
        81, 
        85, 
        89, 
        93, 
        97, 
        101, 
        105, 
        109, 
        113, 
        117, 
        121, 
        125, 
        129, 
        133, 
        137, 
        141, 
        145, 
        149, 
        153, 
        157, 
        161, 
        165, 
        169, 
        173, 
        177, 
        181, 
        185, 
        189, 
        193, 
        197, 
        201, 
        205, 
        209, 
        213, 
        217, 
        221, 
        225, 
        229
      ]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "10", 
        "data": "1", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "11", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [12]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "14", 
        "data": "2", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "15", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [16]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "18", 
        "data": "3", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "19", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [20]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "22", 
        "data": "4", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "23", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [24]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "26", 
        "data": "5", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "27", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [28]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "30", 
        "data": "6", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "31", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [32]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "34", 
        "data": "7", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "35", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [36]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "38", 
        "data": "8", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "39", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [40]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "42", 
        "data": "9", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "43", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [44]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "46", 
        "data": "10", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "47", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [48]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "50", 
        "data": "11", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "51", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [52]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "54", 
        "data": "12", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "55", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [56]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "58", 
        "data": "13", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "59", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [60]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "62", 
        "data": "14", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "63", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [64]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "66", 
        "data": "15", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "67", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [68]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "70", 
        "data": "16", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "71", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [72]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "74", 
        "data": "17", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "75", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [76]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "78", 
        "data": "18", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "79", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [80]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "82", 
        "data": "19", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "83", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [84]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "86", 
        "data": "20", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "87", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [88]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "16"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "90", 
        "data": "21", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "91", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [92]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "94", 
        "data": "22", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "95", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [96]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "98", 
        "data": "23", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "99", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [100]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "102", 
        "data": "24", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "103", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [104]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "106", 
        "data": "25", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "107", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [108]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "110", 
        "data": "26", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "111", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [112]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "114", 
        "data": "27", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "115", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [116]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "118", 
        "data": "28", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "119", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [120]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "122", 
        "data": "29", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "123", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [124]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "126", 
        "data": "30", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "127", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [128]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "130", 
        "data": "31", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "131", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [132]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "134", 
        "data": "32", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "135", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [136]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "138", 
        "data": "33", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "139", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [140]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "142", 
        "data": "34", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "143", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [144]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "146", 
        "data": "35", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "147", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [148]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "150", 
        "data": "36", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "151", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [152]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "154", 
        "data": "37", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "155", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [156]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "158", 
        "data": "38", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "159", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [160]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "32"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "162", 
        "data": "39", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "163", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [164]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "166", 
        "data": "40", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "167", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [168]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "170", 
        "data": "41", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "171", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [172]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "174", 
        "data": "42", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "175", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [176]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "178", 
        "data": "43", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "179", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [180]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "182", 
        "data": "44", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "183", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [184]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "186", 
        "data": "45", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "187", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [188]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "190", 
        "data": "46", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "191", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [192]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "194", 
        "data": "47", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "195", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [196]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "198", 
        "data": "48", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "199", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [200]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "202", 
        "data": "49", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "203", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [204]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "206", 
        "data": "50", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "207", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [208]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "210", 
        "data": "51", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "211", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [212]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "214", 
        "data": "52", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "215", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [216]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "218", 
        "data": "53", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "219", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [220]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "222", 
        "data": "54", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "223", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [224]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "226", 
        "data": "55", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "227", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [228]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "230", 
        "data": "56", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "231", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [232]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "64"
      }
    }
  ], 
  "b64ndarrays": [
    "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", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKgAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAqAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAqAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKQAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAcxVgaQAAAADbaP9KAAAAAPQU8FoAAAAAppkNUwAAAABQGfd/AAAAAKYFX38AAAAA4h15ZQAAAAB6Ub9RAAAAAMV2QVcAAAAAWy/NWwAAAABhnohQAAAAAHrbX1QAAAAA+7gYWQAAAADzNtNBAAAAACntRn8AAAAAc8+4VQAAAAB66U1eAAAAAIYJJH4AAAAA084ScwAAAADWDAReAAAAAIRBik8AAAAAKmZiRAAAAADr1g9fAAAAAAyJXXcAAAAAelzMdAAAAAAq5zJQAAAAAJVOSE0AAAAAVecdWwAAAABZpdlRAAAAAHdsRVMAAAAA0/lATgAAAABJKjdhAAAAAJMzAF8AAAAAStVlXgAAAABS0KhnAAAAAKQP9loAAAAAKUxrawAAAADGy7p7AAAAAP86VVgAAAAApnM2RwAAAAAFYDhQAAAAAHVHglQAAAAApSzDUQAAAACpD9dLAAAAAIqd/nUAAAAAEGixTwAAAAB3n1B+AAAAAHPA408AAAAAB4OVaAAAAACFCZVjAAAAAHk6ylgAAAAA5c95SAAAAACluk9WAAAAAGF2kEUAAAAAzWBtYgAAAAB+LhRVAAAAAHsrRmUAAAAAxK87YQAAAABp6tJTAAAAAL6RYkcAAAAACea8SgAAAAAtC5hdAAAAAFVaq0IAAAAAEc/gYAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAACAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAIAAAAAAAAACAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAgAAAAAAAAAEAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACgAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACgAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJgAAAAAAAAAnAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAoAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAmAAAAAAAAACgAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACcAAAAAAAAAJwAAAAAAAAAnAAAAAAAAACYAAAAAAAAAJwAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAukO3bwAAAAA4DVFFAAAAACSEjEUAAAAAxBOFSAAAAADY+P5JAAAAAAWhrEsAAAAARYGWQQAAAAA+45VSAAAAAHT5v1kAAAAA4ZXHRwAAAADtv9ZNAAAAAA2njU0AAAAAMMTUUQAAAAAEPOFSAAAAAC7p/EsAAAAAzXcnQAAAAACekYBZAAAAAOClukoAAAAA4HD5WgAAAAAihHRRAAAAABy+6nIAAAAAJ0rYVgAAAACupNZsAAAAALUKyHcAAAAAbUl0RgAAAAAaNI1TAAAAANaxukUAAAAAcLFoSQAAAADAOHBkAAAAAOiOPXoAAAAAKSmwUAAAAAALIutvAAAAADH/pUQAAAAA7n2dQQAAAAAR0kRoAAAAAG3dckIAAAAAmMlsdAAAAAAg3z9MAAAAANN1dX8AAAAAUHqjaQAAAADov2JpAAAAANjb62MAAAAADE5VdAAAAABqXuFRAAAAAIRku3wAAAAAN3DLTAAAAADo1yl6AAAAADMJElUAAAAAUTqxVgAAAADwb1xJAAAAAMpign8AAAAA3ElQcAAAAAAqTV98AAAAAAoXTHMAAAAAcVzGQQAAAABUm75+AAAAAHZCnWEAAAAA70kBRwAAAADx/GVzAAAAAMD6wEEAAAAAESHpQwAAAAAIfgBzAAAAAF54tkQAAAAAxl3nXQAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAIAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAIAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAAABAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACoAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAqAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAqAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKQAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACkAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKQAAAAAAAAA=", 
    "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", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAAEAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAABAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAQAAAAAAAIAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQBAAAAAAAAAAAACAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAApAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACgAAAAAAAAAKAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAKAAAAAAAAAA="
  ], 
  "attrs": {"tvm_version": "0.9.dev0"}
}
